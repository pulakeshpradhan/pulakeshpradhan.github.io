var countries = ui.import && ui.import("countries", "table", {
      "id": "USDOS/LSIB_SIMPLE/2017"
    }) || ee.FeatureCollection("USDOS/LSIB_SIMPLE/2017"),
    ndvi_modis = ui.import && ui.import("ndvi_modis", "imageCollection", {
      "id": "MODIS/006/MOD13A1"
    }) || ee.ImageCollection("MODIS/006/MOD13A1"),
    urt_eez = ui.import && ui.import("urt_eez", "table", {
      "id": "users/lmathew/Share/TZA"
    }) || ee.FeatureCollection("users/lmathew/Share/TZA"),
    mikoa = ui.import && ui.import("mikoa", "table", {
      "id": "users/lmathew/tza_regions"
    }) || ee.FeatureCollection("users/lmathew/tza_regions"),
    mawilaya = ui.import && ui.import("mawilaya", "table", {
      "id": "users/lmathew/tza_districts"
    }) || ee.FeatureCollection("users/lmathew/tza_districts"),
    urt_wards = ui.import && ui.import("urt_wards", "table", {
      "id": "users/lmathew/tza_kata"
    }) || ee.FeatureCollection("users/lmathew/tza_kata"),
    vlfr = ui.import && ui.import("vlfr", "table", {
      "id": "users/lmathew/Forest/TZA_VLFR"
    }) || ee.FeatureCollection("users/lmathew/Forest/TZA_VLFR"),
    cfma = ui.import && ui.import("cfma", "table", {
      "id": "users/lmathew/Seascape/CFMA-02-2018"
    }) || ee.FeatureCollection("users/lmathew/Seascape/CFMA-02-2018"),
    cwma = ui.import && ui.import("cwma", "table", {
      "id": "users/lmathew/TZA-WMA"
    }) || ee.FeatureCollection("users/lmathew/TZA-WMA"),
    s1 = ui.import && ui.import("s1", "imageCollection", {
      "id": "COPERNICUS/S1_GRD"
    }) || ee.ImageCollection("COPERNICUS/S1_GRD"),
    s2 = ui.import && ui.import("s2", "imageCollection", {
      "id": "COPERNICUS/S2_SR"
    }) || ee.ImageCollection("COPERNICUS/S2_SR"),
    ls8 = ui.import && ui.import("ls8", "imageCollection", {
      "id": "LANDSAT/LO08/C01/T1"
    }) || ee.ImageCollection("LANDSAT/LO08/C01/T1"),
    wdpa = ui.import && ui.import("wdpa", "table", {
      "id": "WCMC/WDPA/current/polygons"
    }) || ee.FeatureCollection("WCMC/WDPA/current/polygons"),
    terraclimate = ui.import && ui.import("terraclimate", "imageCollection", {
      "id": "IDAHO_EPSCOR/TERRACLIMATE"
    }) || ee.ImageCollection("IDAHO_EPSCOR/TERRACLIMATE"),
    urt = ui.import && ui.import("urt", "table", {
      "id": "users/MPA/TZ/URT_REGIONS_2020"
    }) || ee.FeatureCollection("users/MPA/TZ/URT_REGIONS_2020");
//http://www.climatologylab.org/
//http://www.climatologylab.org/terraclimate.html
//Monitoring from Space for URT
var map = ui.Map();
var mwakaA = '';  
var mwakaB = '';
var picha_a = '';
var geom = null;
var geom_cbo = null;
var geomjina = '';
map.centerObject(urt_eez,6);
//----------------------------------------------------------------------------------------
var empty = ee.Image().byte(); //TZ	TZA	834
var Tanzania = empty.paint({featureCollection: urt_eez, color: 1, width: 3 });
var urt_wdpa_a = ee.FeatureCollection(wdpa.filter(ee.Filter.eq('PARENT_ISO', 'TZA')));
var urt_wdpa_b = empty.paint({featureCollection: urt_wdpa_a, color: 1, width: 1 });
//Display Vector Data (Boundaries)
map.addLayer(Tanzania,{palette: '555555'},'Tanzania + EEZ',1);
map.addLayer(urt_wdpa_b,{palette: '00ff00'},'URT-WDPAs',0);
//==============================================================================================================================================
//==============================================================================================================================================
//==============================================================================================================================================
//==============================================================================================================================================
// Create User Interface portion
// Create a panel to hold our widgets.
var panel = ui.Panel();
panel.style().set('width', '250px');
// Create an intro panel with labels.
var intro = ui.Panel([ ui.Label({ value: 'Spatial-Temporal Results', style: {fontSize: '16px', fontWeight: 'bold', position: 'top-center'}}) ]);
panel.add(intro);
// On Click results.
var jira = ui.Panel([ ui.Label({ value: 'Click a Point on the Map ...', style: {fontSize: '12px', fontWeight: 'bold', stretch:'horizontal'}}) ]);
panel.add(jira);
// panels to hold lon/lat values
var lon = ui.Label();
var lat = ui.Label();
panel.add(ui.Panel([lon], ui.Panel.Layout.flow('horizontal')));
panel.add(ui.Panel([lat], ui.Panel.Layout.flow('horizontal')));
///////////////////////////////////////////////////////////////////////////
//Graph Panel
var panel_grafu = ui.Panel({ style: { width: '350px',position: 'top-right', padding: '10px 10px' } });
//Link Panel
var panel_link = ui.Panel({ style: { width: '200px',position: 'bottom-left', padding: '10px 10px' } });
var urlLabelLink_a = ui.Label('Source: TerraClimate', {shown: false});
urlLabelLink_a.setUrl('http://www.climatologylab.org/terraclimate.html');
urlLabelLink_a.style().set({shown: true});
panel_link.widgets().set(1, urlLabelLink_a);
//-------------------------------------------------------------------------------
var urlLabelLink_b = ui.Label('=>Link on Earth Engine', {shown: false});
urlLabelLink_b.setUrl('https://bit.ly/3aztVsL');
urlLabelLink_b.style().set({shown: true});
panel_link.widgets().set(1, urlLabelLink_b);
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//Satellite Data
var chagua_data = ee.List(["Evapotranspiration","Climate Water Deficit","Drought","Precipitation Accumulation",
                            "Runoff","Soil Moisture","Minimum Temperature","Maximum Temperature",]);
//-----------------------------------------------------------------------------
//Satellite/Platform
var chagua_sat = ui.Select([],'Loading ...');
// Load Platform
chagua_data.evaluate(function(dataa)
{
  chagua_sat.items().reset(dataa);
  chagua_sat.setPlaceholder('Select Data Type')
  chagua_sat.onChange(function(dataa)
  {
    // once you select a state (onChange) get all counties and fill the dropdown
    //countiesDD.setPlaceholder('Loading...')
    print('ok');
  })
})
///////////////////////////////////////////////////////////////////////////////////////////////////////////                            
//Miaka =>https://developers.google.com/earth-engine/tutorial_js_03
//https://sites.google.com/view/earthengine-nicar-2017/intro-to-javascript
//var chagua_mwaka = ee.List(["2015","2016","2017","2018","2019","2020"]);
var mwaka_int = ee.List.sequence(1958, 2020);
var mwaka_function = function(number) { return ee.String(number).slice(0,4); };
var chagua_mwaka = mwaka_int.map(mwaka_function);
// Year Start
var mwaka_a = ui.Select([],'Loading ...');
chagua_mwaka.evaluate(function(mwaka)
{
  mwaka_a.items().reset(mwaka);
  mwaka_a.setPlaceholder('Select(Start Year)')
  mwaka_a.onChange(function(mwaka)
  {
    mwakaA = mwaka + "-01-01";
    //print(mwakaA)
  })
})
// Year End
var mwaka_b = ui.Select([],'Loading ...'); //
chagua_mwaka.evaluate(function(mwaka)
{
  mwaka_b.items().reset(mwaka);
  mwaka_b.setPlaceholder('Select(End Year)')
  mwaka_b.onChange(function(mwaka)
  {
    mwakaB = mwaka + "-12-31";
    //print(mwakaB)
  })
})
///////////////////////////////////////////////////////////////////////////////////////////////////////////
// Load Administrative Names
var mikoa_majina = urt.aggregate_array('REGION').distinct();
var chagua_mkoa = ui.Select([],'Loading ...');    //Mkoa
//var chagua_wilaya = ui.Select([],'Loading ...');    //Wilaya
//var chagua_kata = ui.Select([],'Loading ...');      //Kata
// Load Mikoa
mikoa_majina.evaluate(function(mikoaa)
{
  chagua_mkoa.items().reset(mikoaa);
  chagua_mkoa.setPlaceholder('Select a Region')
  chagua_mkoa.onChange(function(mikoaa)
  {
    var geom_a = urt_wards.filter(ee.Filter.eq('Region_Nam', mikoaa));
    var geom_b = empty.paint({featureCollection: geom_a.geometry(), width: 4});
    map.addLayer(geom_b,{palette: '000000'},mikoaa);
    map.centerObject(geom_a);
    geomjina = mikoaa;
    geom_cbo = geom_a;
    chagua_vlfr.items().reset(); vlfr_majina.evaluate(function(vlfra){ chagua_vlfr.items().reset(vlfra);  })
    chagua_cwma.items().reset(); cwma_majina.evaluate(function(cwmaa){ chagua_cwma.items().reset(cwmaa);  })
    chagua_cfma.items().reset(); cfma_majina.evaluate(function(cfmaa){ chagua_cfma.items().reset(cfmaa);  })
    chagua_wdpa.items().reset(); wdpa_majina.evaluate(function(wdpaa){ chagua_wdpa.items().reset(wdpaa);  })
  })
})
//-------------------------------------------------------------------------------------------------------
// Separator
var kitenganishia = ui.Label({ value: '-------------',style: {fontSize: '5px', stretch:'horizontal'}});
var kitenganishib = ui.Label({ value: '-------------',style: {fontSize: '5px', stretch:'horizontal'}});
//Hifadhi za Jamii (Misitu, Wanyapori,Bahari)
var vlfr_majina = vlfr.aggregate_array('Village').distinct(); 
var cwma_majina = cwma.aggregate_array('Name').distinct(); 
var cfma_majina = cfma.aggregate_array('FGD_NAMES').distinct(); 
var wdpa_majina = urt_wdpa_a.aggregate_array('NAME').distinct(); 
var chagua_vlfr = ui.Select([],'Loading ...');
var chagua_cwma = ui.Select([],'Loading ...');
var chagua_cfma = ui.Select([],'Loading ...');
var chagua_wdpa = ui.Select([],'Loading ...');
//VLFRs
vlfr_majina.evaluate(function(vlfra)
{
  chagua_vlfr.items().reset(vlfra);
  chagua_vlfr.setPlaceholder('Select a VLFR')
  chagua_vlfr.onChange(function(vlfra)
  {
    var geom_a = vlfr.filter(ee.Filter.eq('Village', vlfra));
    var geom_b = empty.paint({featureCollection: geom_a, width: 4 });
    map.addLayer(geom_b,{palette: 'ffff00'},vlfra);
    map.centerObject(geom_a);
    geomjina = vlfra;
    geom_cbo = geom_a;
    chagua_cwma.items().reset(); cwma_majina.evaluate(function(cfmaa){ chagua_cwma.items().reset(cwmaa);  })
    chagua_cfma.items().reset(); cfma_majina.evaluate(function(cfmaa){ chagua_cfma.items().reset(cfmaa);  })
    chagua_wdpa.items().reset(); wdpa_majina.evaluate(function(wdpaa){ chagua_wdpa.items().reset(wdpaa);  })
    chagua_mkoa.items().reset(); mikoa_majina.evaluate(function(mikoaa){ chagua_mkoa.items().reset(mikoaa);  })
  })
})
//CWMAs
cwma_majina.evaluate(function(cwmaa)
{
  chagua_cwma.items().reset(cwmaa);
  chagua_cwma.setPlaceholder('Select a CWMA')
  chagua_cwma.onChange(function(cwmaa)
  {
    var geom_a = cwma.filter(ee.Filter.eq('Name', cwmaa));
    var geom_b = empty.paint({featureCollection: geom_a, width: 4 });
    map.addLayer(geom_b,{palette: 'ffff00'},cwmaa);
    map.centerObject(geom_a);
    geomjina = cwmaa;
    geom_cbo = geom_a;
    chagua_vlfr.items().reset(); vlfr_majina.evaluate(function(vlfra){ chagua_vlfr.items().reset(vlfra);  })
    chagua_cfma.items().reset(); cfma_majina.evaluate(function(cfmaa){ chagua_cfma.items().reset(cfmaa);  })
    chagua_wdpa.items().reset(); wdpa_majina.evaluate(function(wdpaa){ chagua_wdpa.items().reset(wdpaa);  })
    chagua_mkoa.items().reset(); mikoa_majina.evaluate(function(mikoaa){ chagua_mkoa.items().reset(mikoaa);  })
  })
})
//CFMAs
cfma_majina.evaluate(function(cfmaa)
{
  chagua_cfma.items().reset(cfmaa);
  chagua_cfma.setPlaceholder('Select a CFMA')
  chagua_cfma.onChange(function(cfmaa)
  {
    var geom_a = cfma.filter(ee.Filter.eq('FGD_NAMES', cfmaa));
    var geom_b = empty.paint({featureCollection: geom_a, width: 4 });
    map.addLayer(geom_b,{palette: 'ffff00'},cfmaa);
    map.centerObject(geom_a);
    geomjina = cfmaa;
    geom_cbo = geom_a;
    chagua_vlfr.items().reset(); vlfr_majina.evaluate(function(vlfra){ chagua_vlfr.items().reset(vlfra);  })
    chagua_cwma.items().reset(); cwma_majina.evaluate(function(cwmaa){ chagua_cwma.items().reset(cwmaa);  })
    chagua_wdpa.items().reset(); wdpa_majina.evaluate(function(wdpaa){ chagua_wdpa.items().reset(wdpaa);  })
    chagua_mkoa.items().reset(); mikoa_majina.evaluate(function(mikoaa){ chagua_mkoa.items().reset(mikoaa);  })
  })
})
//WDPAs
wdpa_majina.evaluate(function(wdpaa)
{
  chagua_wdpa.items().reset(wdpaa);
  chagua_wdpa.setPlaceholder('Select a PA')
  chagua_wdpa.onChange(function(wdpaa)
  {
    var geom_a = urt_wdpa_a.filter(ee.Filter.eq('NAME', wdpaa));
    var geom_b = empty.paint({featureCollection: geom_a, width: 4 });
    map.addLayer(geom_b,{palette: 'ffff00'},wdpaa);
    map.centerObject(geom_a);
    geomjina = wdpaa;
    geom_cbo = geom_a;
    chagua_vlfr.items().reset(); vlfr_majina.evaluate(function(vlfra){ chagua_vlfr.items().reset(vlfra);  })
    chagua_cwma.items().reset(); cwma_majina.evaluate(function(cwmaa){ chagua_cwma.items().reset(cwmaa);  })
    chagua_cfma.items().reset(); cfma_majina.evaluate(function(cfmaa){ chagua_cfma.items().reset(cfmaa);  })
    chagua_mkoa.items().reset(); mikoa_majina.evaluate(function(mikoaa){ chagua_mkoa.items().reset(mikoaa);  })
  })
})
//-------------------------------------------------------------------------------------------------------
var chora_sasa  = ui.Button({label: '==- LG(Graph it!) -==', style: { margin:'5px', stretch:'horizontal'},  onClick: bonyezo,});
var mwakaA_txt = ui.Panel([ ui.Label({ value: 'Start Year', style: {fontSize: '10px', stretch:'horizontal'}}) ]);
var mwakaB_txt = ui.Panel([ ui.Label({ value: 'End Year', style: {fontSize: '10px', stretch:'horizontal'}}) ]);
//-------------------------------------------------------------------------------------------------------
panel.add(kitenganishia);
chagua_sat.style().set({textAlign:'center', stretch:'horizontal', margin:'5px'});
panel.add(chagua_sat);
//panel.add(mwakaA_txt);
mwaka_a.style().set({textAlign:'center', stretch:'horizontal', margin:'5px'});
panel.add(mwaka_a);
//panel.add(mwakaB_txt);
mwaka_b.style().set({textAlign:'center', stretch:'horizontal', margin:'5px'});
panel.add(mwaka_b);
panel.add(kitenganishib);
chagua_vlfr.style().set({textAlign:'center', stretch:'horizontal', margin:'5px'});
panel.add(chagua_vlfr);
chagua_cwma.style().set({textAlign:'center', stretch:'horizontal', margin:'5px'});
panel.add(chagua_cwma);
chagua_cfma.style().set({textAlign:'center', stretch:'horizontal', margin:'5px'});
panel.add(chagua_cfma);
chagua_wdpa.style().set({textAlign:'center', stretch:'horizontal', margin:'5px'});
panel.add(chagua_wdpa);
chagua_mkoa.style().set({textAlign:'center', stretch:'horizontal', margin:'5px'});
panel.add(chagua_mkoa);
panel.add(chora_sasa);
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// Register a callback on the default map to be invoked when the map is clicked
map.onClick(function(coords)
{
  panel_grafu.clear();
  picha_a = chagua_sat.getValue();
  // Update the lon/lat panel with values from the click event.
  lon.setValue('Longitude: ' + coords.lon.toFixed(5)),
  lat.setValue('Latitude: ' + coords.lat.toFixed(5));
  var pointI = ee.Geometry.Point(coords.lon, coords.lat);
  var eneoJ  = pointI.buffer(100);
  var jira = empty.paint({featureCollection: eneoJ, color: 1, width: 5 });
  map.addLayer(jira ,{palette: 'FFFF00'}, "Point!");
  jira_cbnrm(pointI,mwakaA,mwakaB);
});
//=================================================================================================
//=================================================================================================
//Function for selected Wards or CBOs
function jira_cbnrm(point,mwakaAA,mwakaBB)
{
  var tc = terraclimate.filterDate(mwakaAA,mwakaBB).filterBounds(urt_eez);
  //=====================================================================================================
 //Imagesextract
  if(picha_a === "Evapotranspiration")
  {
    var aet = tc.select('aet');
    var aet_Chart = ui.Chart.image.series(aet, point, ee.Reducer.mean(), 1000);
    aet_Chart.setOptions({ title: 'Evapotranspiration', vAxis: {title: 'mm', maxValue: 1, minValue: -1},hAxis: {title: 'date', format: 'MM-yy', gridlines: {count: 7}}, });
    panel_grafu.widgets().set(1, aet_Chart);
  }
  else if(picha_a === "Climate Water Deficit")
  {
    var def = tc.select('def');
    var def_Chart = ui.Chart.image.series(def, point, ee.Reducer.mean(), 1000);
    def_Chart.setOptions({ title: 'Climate Water Deficit', vAxis: {title: 'mm', maxValue: 1, minValue: -1},hAxis: {title: 'date', format: 'MM-YYYY', gridlines: {count: 7}}, });
    panel_grafu.widgets().set(1, def_Chart);
  }
  if(picha_a === "Drought")
  {
    var pdsi = tc.select('pdsi');
    var pdsi_Chart = ui.Chart.image.series(pdsi, point, ee.Reducer.mean(), 1000);
    pdsi_Chart.setOptions({ title: 'Palmer Drought Severity Index', vAxis: {title: 'index', maxValue: 1, minValue: -1},hAxis: {title: 'date', format: 'MM-YYYY', gridlines: {count: 7}}, });
    panel_grafu.widgets().set(1, pdsi_Chart);
  }
  else if(picha_a === "Precipitation Accumulation")
  {
    var pr = tc.select('pr');
    var pr_Chart = ui.Chart.image.series(pr, point, ee.Reducer.mean(), 1000);
    pr_Chart.setOptions({ title: 'Precipitation Accumulation', vAxis: {title: 'mm', maxValue: 1, minValue: -1},hAxis: {title: 'date', format: 'MM-YYYY', gridlines: {count: 7}}, });
    panel_grafu.widgets().set(1, pr_Chart);
  }
  else if(picha_a === "Runoff")
  {             
    var ro = tc.select('ro');
    var ro_Chart = ui.Chart.image.series(ro, point, ee.Reducer.mean(), 250);
    ro_Chart.setOptions({ title: 'Runoff', vAxis: {title: 'mm', maxValue: 0, minValue: 2},hAxis: {title: 'date', format: 'MM-YYYY', gridlines: {count: 7}}, });
    panel_grafu.widgets().set(1, ro_Chart);
  }
  else if(picha_a === "Soil Moisture")
  {
    var soil = tc.select('soil');
    var soil_Chart = ui.Chart.image.series(soil, point, ee.Reducer.mean(), 250);
    soil_Chart.setOptions({ title: 'Soil Moisture', vAxis: {title: 'mm', maxValue: 0, minValue: 2},hAxis: {title: 'date', format: 'MM-YYYY', gridlines: {count: 7}}, });
    panel_grafu.widgets().set(1, soil_Chart);
  }
  else if(picha_a === "Minimum Temperature")
  {            
    var tmmn = tc.select('tmmn');
    var tmmn_Chart = ui.Chart.image.series(tmmn, point, ee.Reducer.mean(), 250);
    tmmn_Chart.setOptions({ title: 'Minimum Temperature', vAxis: {title: '°C', maxValue: 0, minValue: 2},hAxis: {title: 'date', format: 'MM-YYYY', gridlines: {count: 7}}, });
    panel_grafu.widgets().set(1, tmmn_Chart);
  }
  else if(picha_a === "Maximum Temperature")
  {
    var tmmx = tc.select('tmmx');
    var tmmx_Chart = ui.Chart.image.series(tmmx, point, ee.Reducer.mean(), 250);
    tmmx_Chart.setOptions({ title: 'Maximum Temperature', vAxis: {title: '°C', maxValue: 0, minValue: 2},hAxis: {title: 'date', format: 'MM-YYYY', gridlines: {count: 7}}, });
    panel_grafu.widgets().set(1, tmmx_Chart);
  }
  //=====================================================================================================
  else
  {
    alert('Select Data type, Left-the first dropdown box');
  }
  //panel_grafu.widgets().set(3, urlLabelLink);
}
//=================================================================================================
//=================================================================================================
//Function for selected Wards or CBOs
function kata_cbnrm(eneo,jinalaneo,picha_a,mwakaAA,mwakaBB)
{
  var tc = terraclimate.filterDate(mwakaAA,mwakaBB).filterBounds(urt_eez);
  //============================================================================================================================
  //Actual evapotranspiration, derived using a one-dimensional soil water balance model     //	mm	0*	3140*	0.1	
  var rangi = ['1a3678', '2955bc', '5699ff', '8dbae9', 'acd1ff', 'caebff', 'e5f9ff','fdffb4', 'ffe6a2', 'ffc969', 'ffa12d', 'ff7c1f', 'ca531a', 'ff0000','ab0000'];
  if(picha_a === "Evapotranspiration")
  {
    var aet = tc.select('aet');
    var aet_Chart = ui.Chart.image.series(aet, eneo, ee.Reducer.mean(), 1000);
    aet_Chart.setOptions({ title: jinalaneo + ': Evapotranspiration', vAxis: {title: 'mm(x0.1)', maxValue: 1, minValue: -1},hAxis: {title: 'date', format: 'MM-YYYY', gridlines: {count: 7}}, });
    panel_grafu.widgets().set(1, aet_Chart);
    var aet_viz = aet.mean().clip(eneo).multiply(0.1);
    var stats = aet_viz.reduceRegion({reducer: ee.Reducer.minMax(), geometry: urt,scale:1000,maxPixels:1e9,crs:"EPSG:4326",bestEffort: true});
    //var viz_a = {min: stats.get("aet_min"), max: stats.get("aet_max"),palette: rangi };
    var aet_vizualize = aet_viz.visualize({min: stats.get("aet_min"), max: stats.get("aet_max"),palette: rangi });
    //map.addLayer(aet_viz,viz_a, jinalaneo +'-> Evapotranspiration(Mean)',1);
    map.addLayer(aet_vizualize);
    picha(eneo, aet_vizualize, jinalaneo);
  }
  //Climate water deficit, derived using a one-dimensional soil water balance model    //	mm	0*	4548*	0.1	
  else if(picha_a === "Climate Water Deficit")
  {
    var def = tc.select('def');
    var def_Chart = ui.Chart.image.series(def, eneo, ee.Reducer.mean(), 1000);
    def_Chart.setOptions({ title: jinalaneo + ': Climate Water Deficit', vAxis: {title: 'EVI(x0.01)', maxValue: 1, minValue: -1},hAxis: {title: 'date', format: 'MM-YYYY', gridlines: {count: 7}}, });
    panel_grafu.widgets().set(1, def_Chart);
    var def_viz = def.mean().clip(eneo).multiply(0.1);
    var stats = def_viz.reduceRegion({reducer: ee.Reducer.minMax(), geometry: urt,scale:1000,maxPixels:1e9,crs:"EPSG:4326",bestEffort: true});
    var def_vizualize = def_viz.visualize({min: stats.get("def_min"), max: stats.get("def_max"),palette: rangi });
    //map.addLayer(def_viz,viz_a, jinalaneo +'-> Climate Water Deficit',1)
    map.addLayer(def_vizualize);
    picha(eneo, def_vizualize, jinalaneo);
  }
  //Palmer Drought Severity Index   //		-4317*	3418*	0.01	
  else if(picha_a === "Drought")
  {
    var pdsi = tc.select('pdsi'); 
    var pdsi_Chart = ui.Chart.image.series(pdsi, eneo, ee.Reducer.mean(), 1000);
    pdsi_Chart.setOptions({ title: jinalaneo + ': Drought', vAxis: {title: 'Index(x0.01)', maxValue: 20000, minValue: 10000},hAxis: {title: 'date', format: 'MM-YYYY', gridlines: {count: 7}}, });
    panel_grafu.widgets().set(1, pdsi_Chart);
    var pdsi_viz = pdsi.median().clip(eneo).multiply(0.01);
    var stats = pdsi_viz.reduceRegion({reducer: ee.Reducer.minMax(), geometry: urt,scale:1000,maxPixels:1e9,crs:"EPSG:4326",bestEffort: true});
    var pdsi_vizualize = pdsi_viz.visualize({min: stats.get("pdsi_min"), max: stats.get("pdsi_max"),palette: rangi });
    map.addLayer(pdsi_vizualize);
    //map.addLayer(pdsi_viz,viz_a, jinalaneo +'-> Drought',1)
    picha(eneo, pdsi_vizualize, jinalaneo);
  }
  //Precipitation accumulation   //	mm	0*	7245*	
  else if(picha_a === "Precipitation Accumulation")
  {
    var pr = tc.select('pr');
    var pr_Chart = ui.Chart.image.series(pr, eneo, ee.Reducer.sum(), 1000);
    pr_Chart.setOptions({ title: jinalaneo + ': Precipitation Accumulation', vAxis: {title: 'mm', maxValue: 20000, minValue: 10000},hAxis: {title: 'date', format: 'MM-YYYY', gridlines: {count: 7}}, });
    panel_grafu.widgets().set(1, pr_Chart);
    var pr_viz = pr.sum().clip(eneo);
    var stats = pr_viz.reduceRegion({reducer: ee.Reducer.minMax(), geometry: urt,scale:1000,maxPixels:1e9,crs:"EPSG:4326",bestEffort: true});
    var pr_vizualize = pr_viz.visualize({min: stats.get("pr_min"), max: stats.get("pr_max"),palette: rangi });
    map.addLayer(pr_vizualize);
    //map.addLayer(pr_viz,viz_a, jinalaneo +'-> Precipitation Accumulation',1)
    picha(eneo, pr_vizualize, jinalaneo);
  }
  //Runoff, derived using a one-dimensional soil water balance model    //	mm	0*	12560*		
  else if(picha_a === "Runoff")
  {
    var ro = tc.select('ro');
    var ro_viz = ro.mean().clip(eneo);
    var stats = ro_viz.reduceRegion({reducer: ee.Reducer.minMax(), geometry: urt,scale:1000,maxPixels:1e9,crs:"EPSG:4326",bestEffort: true});
    var ro_Chart = ui.Chart.image.series(ro, eneo, ee.Reducer.mean(), 1000);
    ro_Chart.setOptions({ title: jinalaneo + ': Runoff', vAxis: {title: 'mm', maxValue: 1, minValue: -1},hAxis: {title: 'date', format: 'MM-YYYY', gridlines: {count: 7}}, });
    panel_grafu.widgets().set(1, ro_Chart);
    var ro_vizualize = ro_viz.visualize({min: stats.get("ro_min"), max: stats.get("ro_max"),palette: rangi });
    map.addLayer(ro_vizualize);
    //map.addLayer(ro_viz,viz_a, jinalaneo +'-> Runoff',1)
    picha(eneo, ro_vizualize, jinalaneo);
  }
  //Soil moisture, derived using a one-dimensional soil water balance model     //	mm	0*	8882*	0.1	
  else if(picha_a === "Soil Moisture")
  {
    var soil = tc.select('soil'); 
    var soil_Chart = ui.Chart.image.series(soil, eneo, ee.Reducer.mean(), 1000);
    soil_Chart.setOptions({ title: jinalaneo + ': MODIS Sub Surface Soil Moisture', vAxis: {title: 'mm(x0.1)', maxValue: 1, minValue: -1},hAxis: {title: 'date', format: 'MM-YYYY', gridlines: {count: 7}}, });
    panel_grafu.widgets().set(1, soil_Chart);
    var soil_viz = soil.mean().clip(eneo).multiply(0.1);
    var stats = ro_viz.reduceRegion({reducer: ee.Reducer.minMax(), geometry: urt,scale:1000,maxPixels:1e9,crs:"EPSG:4326",bestEffort: true});
    var soil_vizualize = soil_viz.visualize({min: stats.get("soil_min"), max: stats.get("soil_max"),palette: rangi });
    map.addLayer(soil_vizualize);
    //map.addLayer(soil_viz,viz_a, jinalaneo +'-> Soil Moisture',1);
    picha(eneo, soil_vizualize, jinalaneo);
  }
  //Minimum temperature   //	°C	-770*	387*	0.1	
  else if(picha_a === "Minimum Temperature")
  {
    var tmmn = tc.select('tmmn'); 
    var tmmn_Chart = ui.Chart.image.series(tmmn, eneo, ee.Reducer.mean(), 1000);
    tmmn_Chart.setOptions({ title: jinalaneo + ': Minimum Temperature', vAxis: {title: '°C(x0.1)', maxValue: 1, minValue: -1},hAxis: {title: 'date', format: 'MM-YYYY', gridlines: {count: 7}}, });
    panel_grafu.widgets().set(1, tmmn_Chart);
    var tmmn_viz = tmmn.mean().clip(eneo).multiply(0.1).unitScale(-10, 40);
    var stats = tmmn_viz.reduceRegion({reducer: ee.Reducer.minMax(), geometry: urt,scale:1000,maxPixels:1e9,crs:"EPSG:4326",bestEffort: true});
    var tmmn_vizualize = tmmn_viz.visualize({min: stats.get("tmmn_min"), max: stats.get("tmmn_max"),palette: rangi });
    map.addLayer(tmmn_vizualize);
    //map.addLayer(tmmn_viz,viz_a, jinalaneo +'-> Minimum Temperature',1);
    picha(eneo, tmmn_vizualize, jinalaneo);
  }
  //Maximum temperature     //	°C	-670*	576*	0.1	
  else if(picha_a === "Maximum Temperature")
  {
    var tmmx = tc.select('tmmx'); 
    var tmmx_Chart = ui.Chart.image.series(tmmx, eneo, ee.Reducer.mean(), 1000);
    tmmx_Chart.setOptions({ title: jinalaneo + ': Maximum Temperature', vAxis: {title: '°C(x0.1)', maxValue: 1, minValue: -1},hAxis: {title: 'date', format: 'MM-YYYY', gridlines: {count: 7}}, });
    panel_grafu.widgets().set(1, tmmx_Chart);
    var tmmx_viz = tmmx.mean().clip(eneo).multiply(0.1).unitScale(-10, 60);
    var stats = tmmx_viz.reduceRegion({reducer: ee.Reducer.minMax(), geometry: urt,scale:1000,maxPixels:1e9,crs:"EPSG:4326",bestEffort: true});
    var tmmx_vizualize = tmmx_viz.visualize({min: stats.get("tmmx_min"), max: stats.get("tmmx_max"),palette: rangi });
    map.addLayer(tmmx_vizualize);
    //map.addLayer(tmmn_viz,viz_a, jinalaneo +'-> Maximum Temperature',1);
    picha(eneo, tmmx_vizualize, jinalaneo);
  }
  //panel_grafu.widgets().set(3, urlLabelLink);
}
//=================================================================================================
function bonyezo()
{
  panel_grafu.clear();
  var picha_a = chagua_sat.getValue();
  kata_cbnrm(geom_cbo,geomjina,picha_a,mwakaA,mwakaB);
}
//--------------------------------------------------------------------------
function picha(eneo_sasa, ndvi_to_jpeg, jina_sasa)
{
  //var img_bound = ee.Geometry.Polygon(geom_cbo.geometry().coordinates());
  var img_bound = ee.Geometry.Polygon(geom_cbo.geometry().transform('epsg:4326').coordinates());
  var downloadArgsRGB = {dimensions:1024,region:img_bound, format:"png", crs: "EPSG:4326"};
  var urlrgb = ndvi_to_jpeg.getDownloadURL(downloadArgsRGB);
  var urlLabelrgb = ui.Label('Download-NDVI', {shown: false});
  urlLabelrgb.setUrl(urlrgb);
  urlLabelrgb.style().set({shown: true});
  panel_grafu.widgets().set(2, urlLabelrgb);
}
//=================================================================================================
map.setControlVisibility({zoomControl: true});
map.setControlVisibility({layers: true});
var title = ui.Label('CBNRM - Climate Vulnerability', {
stretch: 'horizontal', textAlign: 'center', fontWeight: 'bold', fontSize: '30px' });
// Create a grid of maps.
var mapGrid = ui.Panel(
[
panel,
ui.Panel(map, null, {stretch: 'both'}),
],
ui.Panel.Layout.Flow('horizontal'), {width: '100%', stretch: 'both'}
);
map.add(panel_grafu);
map.add(panel_link);
ui.root.widgets().reset([title, mapGrid]);
ui.root.setLayout(ui.Panel.Layout.Flow('vertical'));
map.style().set('cursor', 'crosshair');
// Add the panel to the ui.root.i
//ui.root.insert(0, panel);