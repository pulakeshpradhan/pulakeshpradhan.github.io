var departamentos = ui.import && ui.import("departamentos", "table", {
      "id": "users/erollero/Departamentos_INDEC_2015"
    }) || ee.FeatureCollection("users/erollero/Departamentos_INDEC_2015"),
    table = ui.import && ui.import("table", "table", {
      "id": "users/erollero/GRUESA21/vclincolng21"
    }) || ee.FeatureCollection("users/erollero/GRUESA21/vclincolng21"),
    table2 = ui.import && ui.import("table2", "table", {
      "id": "users/erollero/GRUESA21/vcvenadog21"
    }) || ee.FeatureCollection("users/erollero/GRUESA21/vcvenadog21"),
    table3 = ui.import && ui.import("table3", "table", {
      "id": "users/erollero/gruesa21/muestras42105"
    }) || ee.FeatureCollection("users/erollero/gruesa21/muestras42105"),
    bajos = ui.import && ui.import("bajos", "geometry", {
      "geometries": [
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -63.0293205509098,
                -34.89851430245759
              ],
              [
                -63.0293205509098,
                -34.90224517781476
              ],
              [
                -63.024986101141735,
                -34.90224517781476
              ],
              [
                -63.024986101141735,
                -34.89851430245759
              ]
            ]
          ],
          "geodesic": false,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -63.02880556677894,
                -34.90632782832357
              ],
              [
                -63.02880556677894,
                -34.90759481652036
              ],
              [
                -63.0273035297306,
                -34.90759481652036
              ],
              [
                -63.0273035297306,
                -34.90632782832357
              ]
            ]
          ],
          "geodesic": false,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -63.02331240271644,
                -34.90129487659356
              ],
              [
                -63.02331240271644,
                -34.90418094258419
              ],
              [
                -63.020994974127575,
                -34.90418094258419
              ],
              [
                -63.020994974127575,
                -34.90129487659356
              ]
            ]
          ],
          "geodesic": false,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -63.57492272818562,
                -34.4573988248762
              ],
              [
                -63.57715432608601,
                -34.46277728148703
              ],
              [
                -63.57981507742878,
                -34.46716471314559
              ],
              [
                -63.579300093297924,
                -34.47531147499404
              ],
              [
                -63.57586686575886,
                -34.48507526749098
              ],
              [
                -63.573291945104565,
                -34.489178549356886
              ],
              [
                -63.570545363073315,
                -34.48719767986638
              ],
              [
                -63.5669404741573,
                -34.47425012434992
              ],
              [
                -63.56814210379597,
                -34.466678764828636
              ],
              [
                -63.57088868582722,
                -34.4617251673216
              ],
              [
                -63.57372109854695,
                -34.45811593261663
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -63.469694304113354,
                -34.431643444657034
              ],
              [
                -63.47081010306355,
                -34.43553698369161
              ],
              [
                -63.475874113683666,
                -34.438864046036635
              ],
              [
                -63.477419066076244,
                -34.447853530609
              ],
              [
                -63.455703901891674,
                -34.44997688966174
              ],
              [
                -63.44686334097859,
                -34.44849054399266
              ],
              [
                -63.43991105521199,
                -34.44834898588279
              ],
              [
                -63.43725030386921,
                -34.452170970640296
              ],
              [
                -63.43561952078816,
                -34.45040155499471
              ],
              [
                -63.43759362662312,
                -34.44551777330564
              ],
              [
                -63.44137017691609,
                -34.436528037391575
              ],
              [
                -63.45038239920613,
                -34.439005620219255
              ],
              [
                -63.45776383841511,
                -34.43829774690739
              ],
              [
                -63.464201140050854,
                -34.434545918238236
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -61.887214116129805,
                -36.351783019050245
              ],
              [
                -61.895410946879316,
                -36.351160869719614
              ],
              [
                -61.90034621146672,
                -36.35150650885044
              ],
              [
                -61.90506689933293,
                -36.35071153655542
              ],
              [
                -61.910173825297285,
                -36.35240516340901
              ],
              [
                -61.91407912162297,
                -36.35413331609604
              ],
              [
                -61.9198297777509,
                -36.35900650003357
              ],
              [
                -61.912448338541914,
                -36.361114662365445
              ],
              [
                -61.90528147605412,
                -36.36028522826193
              ],
              [
                -61.898972920451094,
                -36.35893737899028
              ],
              [
                -61.893694333109785,
                -36.357520384074924
              ],
              [
                -61.88399546531193,
                -36.35240516340901
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -61.8923639574384,
                -36.359317543968736
              ],
              [
                -61.897470883402754,
                -36.36104554319445
              ],
              [
                -61.90129034903996,
                -36.3615293761023
              ],
              [
                -61.90373652366154,
                -36.36329188482892
              ],
              [
                -61.90463774589055,
                -36.36612563870063
              ],
              [
                -61.90236323264592,
                -36.36612563870063
              ],
              [
                -61.899702481303144,
                -36.36412128688782
              ],
              [
                -61.89549677756779,
                -36.36377570377092
              ],
              [
                -61.893179348978926,
                -36.36190952841969
              ],
              [
                -61.891205243143965,
                -36.36052714745525
              ]
            ]
          ],
          "evenOdd": true
        }
      ],
      "displayProperties": [
        {
          "type": "rectangle"
        },
        {
          "type": "rectangle"
        },
        {
          "type": "rectangle"
        },
        {
          "type": "polygon"
        },
        {
          "type": "polygon"
        },
        {
          "type": "polygon"
        },
        {
          "type": "polygon"
        }
      ],
      "properties": {
        "class": 11
      },
      "color": "#d63000",
      "mode": "FeatureCollection",
      "shown": true,
      "locked": false
    }) || 
    /* color: #d63000 */
    /* displayProperties: [
      {
        "type": "rectangle"
      },
      {
        "type": "rectangle"
      },
      {
        "type": "rectangle"
      },
      {
        "type": "polygon"
      },
      {
        "type": "polygon"
      },
      {
        "type": "polygon"
      },
      {
        "type": "polygon"
      }
    ] */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-63.0293205509098, -34.89851430245759],
                  [-63.0293205509098, -34.90224517781476],
                  [-63.024986101141735, -34.90224517781476],
                  [-63.024986101141735, -34.89851430245759]]], null, false),
            {
              "class": 11,
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-63.02880556677894, -34.90632782832357],
                  [-63.02880556677894, -34.90759481652036],
                  [-63.0273035297306, -34.90759481652036],
                  [-63.0273035297306, -34.90632782832357]]], null, false),
            {
              "class": 11,
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-63.02331240271644, -34.90129487659356],
                  [-63.02331240271644, -34.90418094258419],
                  [-63.020994974127575, -34.90418094258419],
                  [-63.020994974127575, -34.90129487659356]]], null, false),
            {
              "class": 11,
              "system:index": "2"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-63.57492272818562, -34.4573988248762],
                  [-63.57715432608601, -34.46277728148703],
                  [-63.57981507742878, -34.46716471314559],
                  [-63.579300093297924, -34.47531147499404],
                  [-63.57586686575886, -34.48507526749098],
                  [-63.573291945104565, -34.489178549356886],
                  [-63.570545363073315, -34.48719767986638],
                  [-63.5669404741573, -34.47425012434992],
                  [-63.56814210379597, -34.466678764828636],
                  [-63.57088868582722, -34.4617251673216],
                  [-63.57372109854695, -34.45811593261663]]]),
            {
              "class": 11,
              "system:index": "3"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-63.469694304113354, -34.431643444657034],
                  [-63.47081010306355, -34.43553698369161],
                  [-63.475874113683666, -34.438864046036635],
                  [-63.477419066076244, -34.447853530609],
                  [-63.455703901891674, -34.44997688966174],
                  [-63.44686334097859, -34.44849054399266],
                  [-63.43991105521199, -34.44834898588279],
                  [-63.43725030386921, -34.452170970640296],
                  [-63.43561952078816, -34.45040155499471],
                  [-63.43759362662312, -34.44551777330564],
                  [-63.44137017691609, -34.436528037391575],
                  [-63.45038239920613, -34.439005620219255],
                  [-63.45776383841511, -34.43829774690739],
                  [-63.464201140050854, -34.434545918238236]]]),
            {
              "class": 11,
              "system:index": "4"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-61.887214116129805, -36.351783019050245],
                  [-61.895410946879316, -36.351160869719614],
                  [-61.90034621146672, -36.35150650885044],
                  [-61.90506689933293, -36.35071153655542],
                  [-61.910173825297285, -36.35240516340901],
                  [-61.91407912162297, -36.35413331609604],
                  [-61.9198297777509, -36.35900650003357],
                  [-61.912448338541914, -36.361114662365445],
                  [-61.90528147605412, -36.36028522826193],
                  [-61.898972920451094, -36.35893737899028],
                  [-61.893694333109785, -36.357520384074924],
                  [-61.88399546531193, -36.35240516340901]]]),
            {
              "class": 11,
              "system:index": "5"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-61.8923639574384, -36.359317543968736],
                  [-61.897470883402754, -36.36104554319445],
                  [-61.90129034903996, -36.3615293761023],
                  [-61.90373652366154, -36.36329188482892],
                  [-61.90463774589055, -36.36612563870063],
                  [-61.90236323264592, -36.36612563870063],
                  [-61.899702481303144, -36.36412128688782],
                  [-61.89549677756779, -36.36377570377092],
                  [-61.893179348978926, -36.36190952841969],
                  [-61.891205243143965, -36.36052714745525]]]),
            {
              "class": 11,
              "system:index": "6"
            })]),
    montes = ui.import && ui.import("montes", "geometry", {
      "geometries": [
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -63.322745760588205,
                -35.21551404447144
              ],
              [
                -63.32489152780012,
                -35.21756510782813
              ],
              [
                -63.3264364801927,
                -35.21812607339556
              ],
              [
                -63.32864662042097,
                -35.22075554781269
              ],
              [
                -63.32609315743879,
                -35.221526844149075
              ],
              [
                -63.32366844048933,
                -35.219651178933375
              ],
              [
                -63.32287450662092,
                -35.21745992635263
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -63.50889834085661,
                -34.88213125137717
              ],
              [
                -63.50869449297148,
                -34.883653842967256
              ],
              [
                -63.50390943208891,
                -34.88350422539025
              ],
              [
                -63.503523193990766,
                -34.88356583266083
              ],
              [
                -63.50339444795805,
                -34.88419950476333
              ],
              [
                -63.49943550745207,
                -34.88412029601771
              ],
              [
                -63.499574982320844,
                -34.88336340859838
              ],
              [
                -63.496828400289594,
                -34.88327539798093
              ],
              [
                -63.49693568865019,
                -34.88252730392718
              ],
              [
                -63.49698933283049,
                -34.881699991985464
              ],
              [
                -63.5037270418759,
                -34.88192882378124
              ],
              [
                -63.50366266885954,
                -34.8829321556723
              ],
              [
                -63.50385578790861,
                -34.88298496227463
              ],
              [
                -63.504038178121625,
                -34.881920022570114
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -63.346594981559726,
                -34.43346410701704
              ],
              [
                -63.34726016939542,
                -34.435340066691666
              ],
              [
                -63.34676664293668,
                -34.43679125189091
              ],
              [
                -63.34753911913297,
                -34.44045449754167
              ],
              [
                -63.346337489494296,
                -34.44148088539327
              ],
              [
                -63.34444921434781,
                -34.442064859060224
              ],
              [
                -63.34256093920133,
                -34.43960506357747
              ],
              [
                -63.34547918260953,
                -34.43877331778654
              ],
              [
                -63.34502857149503,
                -34.43668506846257
              ],
              [
                -63.34569375933072,
                -34.43601257028311
              ],
              [
                -63.34496419847867,
                -34.43413662570486
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -62.38763456818238,
                -34.19962413301898
              ],
              [
                -62.38789206024781,
                -34.20093742320479
              ],
              [
                -62.375704102484136,
                -34.2026766138564
              ],
              [
                -62.374974541632085,
                -34.201327856882486
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -62.40960722443238,
                -34.205622507994356
              ],
              [
                -62.41080885407105,
                -34.209136150703216
              ],
              [
                -62.40759020325318,
                -34.209207131874756
              ],
              [
                -62.40630274292603,
                -34.20565800006715
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -61.79726173884232,
                -36.425351998547384
              ],
              [
                -61.79915001398881,
                -36.426974939645916
              ],
              [
                -61.79189732081254,
                -36.43325920002349
              ],
              [
                -61.78816368586381,
                -36.43042789293242
              ],
              [
                -61.79266979700883,
                -36.427147590957766
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -61.81039383417924,
                -36.417547595256
              ],
              [
                -61.804214024608925,
                -36.42331464148592
              ],
              [
                -61.80434277064164,
                -36.420413905298986
              ],
              [
                -61.80824806696732,
                -36.41727131881876
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -61.75226681617253,
                -36.387669159722826
              ],
              [
                -61.7524599352216,
                -36.39003564625217
              ],
              [
                -61.75228827384465,
                -36.39570110234001
              ],
              [
                -61.75127976325505,
                -36.39378387531432
              ],
              [
                -61.750657490763594,
                -36.39103749475836
              ],
              [
                -61.75027125266545,
                -36.38937925574774
              ]
            ]
          ],
          "evenOdd": true
        }
      ],
      "displayProperties": [],
      "properties": {
        "class": 12
      },
      "color": "#98ff00",
      "mode": "FeatureCollection",
      "shown": true,
      "locked": false
    }) || /* color: #98ff00 */ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-63.322745760588205, -35.21551404447144],
                  [-63.32489152780012, -35.21756510782813],
                  [-63.3264364801927, -35.21812607339556],
                  [-63.32864662042097, -35.22075554781269],
                  [-63.32609315743879, -35.221526844149075],
                  [-63.32366844048933, -35.219651178933375],
                  [-63.32287450662092, -35.21745992635263]]]),
            {
              "class": 12,
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-63.50889834085661, -34.88213125137717],
                  [-63.50869449297148, -34.883653842967256],
                  [-63.50390943208891, -34.88350422539025],
                  [-63.503523193990766, -34.88356583266083],
                  [-63.50339444795805, -34.88419950476333],
                  [-63.49943550745207, -34.88412029601771],
                  [-63.499574982320844, -34.88336340859838],
                  [-63.496828400289594, -34.88327539798093],
                  [-63.49693568865019, -34.88252730392718],
                  [-63.49698933283049, -34.881699991985464],
                  [-63.5037270418759, -34.88192882378124],
                  [-63.50366266885954, -34.8829321556723],
                  [-63.50385578790861, -34.88298496227463],
                  [-63.504038178121625, -34.881920022570114]]]),
            {
              "class": 12,
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-63.346594981559726, -34.43346410701704],
                  [-63.34726016939542, -34.435340066691666],
                  [-63.34676664293668, -34.43679125189091],
                  [-63.34753911913297, -34.44045449754167],
                  [-63.346337489494296, -34.44148088539327],
                  [-63.34444921434781, -34.442064859060224],
                  [-63.34256093920133, -34.43960506357747],
                  [-63.34547918260953, -34.43877331778654],
                  [-63.34502857149503, -34.43668506846257],
                  [-63.34569375933072, -34.43601257028311],
                  [-63.34496419847867, -34.43413662570486]]]),
            {
              "class": 12,
              "system:index": "2"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-62.38763456818238, -34.19962413301898],
                  [-62.38789206024781, -34.20093742320479],
                  [-62.375704102484136, -34.2026766138564],
                  [-62.374974541632085, -34.201327856882486]]]),
            {
              "class": 12,
              "system:index": "3"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-62.40960722443238, -34.205622507994356],
                  [-62.41080885407105, -34.209136150703216],
                  [-62.40759020325318, -34.209207131874756],
                  [-62.40630274292603, -34.20565800006715]]]),
            {
              "class": 12,
              "system:index": "4"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-61.79726173884232, -36.425351998547384],
                  [-61.79915001398881, -36.426974939645916],
                  [-61.79189732081254, -36.43325920002349],
                  [-61.78816368586381, -36.43042789293242],
                  [-61.79266979700883, -36.427147590957766]]]),
            {
              "class": 12,
              "system:index": "5"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-61.81039383417924, -36.417547595256],
                  [-61.804214024608925, -36.42331464148592],
                  [-61.80434277064164, -36.420413905298986],
                  [-61.80824806696732, -36.41727131881876]]]),
            {
              "class": 12,
              "system:index": "6"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-61.75226681617253, -36.387669159722826],
                  [-61.7524599352216, -36.39003564625217],
                  [-61.75228827384465, -36.39570110234001],
                  [-61.75127976325505, -36.39378387531432],
                  [-61.750657490763594, -36.39103749475836],
                  [-61.75027125266545, -36.38937925574774]]]),
            {
              "class": 12,
              "system:index": "7"
            })]),
    table4 = ui.import && ui.import("table4", "table", {
      "id": "users/erollero/GRUESA21/zone"
    }) || ee.FeatureCollection("users/erollero/GRUESA21/zone"),
    table5 = ui.import && ui.import("table5", "table", {
      "id": "users/erollero/GRUESA21/vcpehuajog21"
    }) || ee.FeatureCollection("users/erollero/GRUESA21/vcpehuajog21"),
    image3 = ui.import && ui.import("image3", "image", {
      "id": "users/erollero/EJIDOS/ejidobsas"
    }) || ee.Image("users/erollero/EJIDOS/ejidobsas"),
    roi2 = ui.import && ui.import("roi2", "table", {
      "id": "users/erollero/bsas"
    }) || ee.FeatureCollection("users/erollero/bsas"),
    mani = ui.import && ui.import("mani", "geometry", {
      "geometries": [
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -61.87019422353818,
                -36.418341973277705
              ],
              [
                -61.87038734258725,
                -36.41890315102511
              ],
              [
                -61.86892822088315,
                -36.41917078821496
              ],
              [
                -61.869024780407685,
                -36.41986146057247
              ],
              [
                -61.866278198376435,
                -36.419222588854836
              ],
              [
                -61.867018488064545,
                -36.418756381851985
              ],
              [
                -61.867007759228485,
                -36.41806569966634
              ],
              [
                -61.86732962431027,
                -36.418039798964884
              ],
              [
                -61.86768367590024,
                -36.418298805590716
              ],
              [
                -61.8685956269653,
                -36.41853191081542
              ],
              [
                -61.8691535264404,
                -36.4187218478886
              ],
              [
                -61.86987235845639,
                -36.41859234538908
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -62.3616391422059,
                -36.15046555625863
              ],
              [
                -62.365801930597016,
                -36.153722859265145
              ],
              [
                -62.358055710962006,
                -36.1600984650178
              ],
              [
                -62.35728323476572,
                -36.16006381638764
              ],
              [
                -62.35554516332407,
                -36.15853926150088
              ],
              [
                -62.35689699666757,
                -36.15692805195747
              ],
              [
                -62.357154488733,
                -36.1555420387629
              ],
              [
                -62.358849644830414,
                -36.1537921621145
              ],
              [
                -62.35915005224008,
                -36.152354115440275
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -61.865273257463286,
                -36.415672421527724
              ],
              [
                -61.865841885774444,
                -36.41668257327444
              ],
              [
                -61.86613156434805,
                -36.417390535044056
              ],
              [
                -61.86766578790457,
                -36.416389026257804
              ],
              [
                -61.86823441621573,
                -36.41657896857172
              ],
              [
                -61.8674726688555,
                -36.41717469372496
              ],
              [
                -61.867043515413116,
                -36.41790855176251
              ],
              [
                -61.86544491884024,
                -36.41797762039726
              ],
              [
                -61.864844104020904,
                -36.417727246304075
              ],
              [
                -61.863299151628325,
                -36.41684661377108
              ],
              [
                -61.86314894792349,
                -36.415715590674516
              ],
              [
                -61.86417891618521,
                -36.41594006985106
              ],
              [
                -61.864833375184844,
                -36.415655153862296
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -61.79718210351275,
                -36.41492465038876
              ],
              [
                -61.79969265115069,
                -36.41639240205017
              ],
              [
                -61.79870559823321,
                -36.41792919465252
              ],
              [
                -61.79570152413653,
                -36.41527000621618
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -62.358322720104844,
                -36.147962669817275
              ],
              [
                -62.360811810070665,
                -36.149799309525946
              ],
              [
                -62.35776482062975,
                -36.152675470199966
              ],
              [
                -62.35669193702379,
                -36.15229429834268
              ],
              [
                -62.35467491584459,
                -36.15101216122602
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -62.351842503124864,
                -36.145848748237306
              ],
              [
                -62.35549030738512,
                -36.1489676289484
              ],
              [
                -62.35424576240221,
                -36.15104681385613
              ],
              [
                -62.351284603649766,
                -36.148413170330464
              ],
              [
                -62.350040058666856,
                -36.14709631540386
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -62.34961090522447,
                -36.14751216671654
              ],
              [
                -62.35025463538805,
                -36.14830920890324
              ],
              [
                -62.35373077827135,
                -36.15090820324381
              ],
              [
                -62.350812534863145,
                -36.15045771706189
              ],
              [
                -62.34772263007799,
                -36.14927951019848
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -62.25537784813585,
                -36.44249372273422
              ],
              [
                -62.25567825554552,
                -36.44295115640035
              ],
              [
                -62.25534566162767,
                -36.444073152086396
              ],
              [
                -62.25410111664476,
                -36.44402999870617
              ],
              [
                -62.25405820130052,
                -36.44362435575893
              ],
              [
                -62.255034525381944,
                -36.44379697003824
              ],
              [
                -62.25488432167711,
                -36.442830325127986
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -62.25637026547136,
                -36.441643579418056
              ],
              [
                -62.256665308463,
                -36.44186798363476
              ],
              [
                -62.25644536732378,
                -36.44222616594371
              ],
              [
                -62.255984027373216,
                -36.44191976913106
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -62.25733049629869,
                -36.44099194041809
              ],
              [
                -62.25794740437212,
                -36.44135012677085
              ],
              [
                -62.257491428839586,
                -36.441669472245415
              ],
              [
                -62.25711055515947,
                -36.441125721056544
              ]
            ]
          ],
          "evenOdd": true
        }
      ],
      "displayProperties": [],
      "properties": {
        "class": 5
      },
      "color": "#98ff00",
      "mode": "FeatureCollection",
      "shown": true,
      "locked": false
    }) || /* color: #98ff00 */ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-61.87019422353818, -36.418341973277705],
                  [-61.87038734258725, -36.41890315102511],
                  [-61.86892822088315, -36.41917078821496],
                  [-61.869024780407685, -36.41986146057247],
                  [-61.866278198376435, -36.419222588854836],
                  [-61.867018488064545, -36.418756381851985],
                  [-61.867007759228485, -36.41806569966634],
                  [-61.86732962431027, -36.418039798964884],
                  [-61.86768367590024, -36.418298805590716],
                  [-61.8685956269653, -36.41853191081542],
                  [-61.8691535264404, -36.4187218478886],
                  [-61.86987235845639, -36.41859234538908]]]),
            {
              "class": 5,
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-62.3616391422059, -36.15046555625863],
                  [-62.365801930597016, -36.153722859265145],
                  [-62.358055710962006, -36.1600984650178],
                  [-62.35728323476572, -36.16006381638764],
                  [-62.35554516332407, -36.15853926150088],
                  [-62.35689699666757, -36.15692805195747],
                  [-62.357154488733, -36.1555420387629],
                  [-62.358849644830414, -36.1537921621145],
                  [-62.35915005224008, -36.152354115440275]]]),
            {
              "class": 5,
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-61.865273257463286, -36.415672421527724],
                  [-61.865841885774444, -36.41668257327444],
                  [-61.86613156434805, -36.417390535044056],
                  [-61.86766578790457, -36.416389026257804],
                  [-61.86823441621573, -36.41657896857172],
                  [-61.8674726688555, -36.41717469372496],
                  [-61.867043515413116, -36.41790855176251],
                  [-61.86544491884024, -36.41797762039726],
                  [-61.864844104020904, -36.417727246304075],
                  [-61.863299151628325, -36.41684661377108],
                  [-61.86314894792349, -36.415715590674516],
                  [-61.86417891618521, -36.41594006985106],
                  [-61.864833375184844, -36.415655153862296]]]),
            {
              "class": 5,
              "system:index": "2"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-61.79718210351275, -36.41492465038876],
                  [-61.79969265115069, -36.41639240205017],
                  [-61.79870559823321, -36.41792919465252],
                  [-61.79570152413653, -36.41527000621618]]]),
            {
              "class": 5,
              "system:index": "3"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-62.358322720104844, -36.147962669817275],
                  [-62.360811810070665, -36.149799309525946],
                  [-62.35776482062975, -36.152675470199966],
                  [-62.35669193702379, -36.15229429834268],
                  [-62.35467491584459, -36.15101216122602]]]),
            {
              "class": 5,
              "system:index": "4"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-62.351842503124864, -36.145848748237306],
                  [-62.35549030738512, -36.1489676289484],
                  [-62.35424576240221, -36.15104681385613],
                  [-62.351284603649766, -36.148413170330464],
                  [-62.350040058666856, -36.14709631540386]]]),
            {
              "class": 5,
              "system:index": "5"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-62.34961090522447, -36.14751216671654],
                  [-62.35025463538805, -36.14830920890324],
                  [-62.35373077827135, -36.15090820324381],
                  [-62.350812534863145, -36.15045771706189],
                  [-62.34772263007799, -36.14927951019848]]]),
            {
              "class": 5,
              "system:index": "6"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-62.25537784813585, -36.44249372273422],
                  [-62.25567825554552, -36.44295115640035],
                  [-62.25534566162767, -36.444073152086396],
                  [-62.25410111664476, -36.44402999870617],
                  [-62.25405820130052, -36.44362435575893],
                  [-62.255034525381944, -36.44379697003824],
                  [-62.25488432167711, -36.442830325127986]]]),
            {
              "class": 5,
              "system:index": "7"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-62.25637026547136, -36.441643579418056],
                  [-62.256665308463, -36.44186798363476],
                  [-62.25644536732378, -36.44222616594371],
                  [-62.255984027373216, -36.44191976913106]]]),
            {
              "class": 5,
              "system:index": "8"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-62.25733049629869, -36.44099194041809],
                  [-62.25794740437212, -36.44135012677085],
                  [-62.257491428839586, -36.441669472245415],
                  [-62.25711055515947, -36.441125721056544]]]),
            {
              "class": 5,
              "system:index": "9"
            })]),
    table6 = ui.import && ui.import("table6", "table", {
      "id": "users/erollero/GRUESA21/zone"
    }) || ee.FeatureCollection("users/erollero/GRUESA21/zone"),
    table7 = ui.import && ui.import("table7", "table", {
      "id": "users/erollero/GRUESA21/vcrosariog21"
    }) || ee.FeatureCollection("users/erollero/GRUESA21/vcrosariog21");
var roi1 = departamentos.filterMetadata("LINK","equals","6392");
var roi2 = departamentos.filterMetadata("LINK","equals","14084");
var roi3 = departamentos.filterMetadata("LINK","equals","82042");
var roi = roi1.merge(roi2).merge(roi3);
var planta_urbana = ee.FeatureCollection("users/santiagobanchero/curso-gee/planta_urbana");
var muestras = table3.merge(table2).merge(table).merge(table5).merge(montes).merge(bajos).merge(mani).merge(table7);
//Centrado del mapa y zoom
Map.setCenter(-63.5975, -34.1303,10);
var gsw = ee.Image('JRC/GSW1_2/GlobalSurfaceWater');
var occurrence = gsw.select('occurrence').clip(roi);
var VIS_OCCURRENCE = {
  min:0,
  max:100,
  palette: ['red', 'blue']
};
var VIS_WATER_MASK = {
  palette: ['white', 'blue']
};
// Create a water mask layer, and set the image mask so that non-water areas
// are no opaque.
var water_mask = occurrence.gt(4).unmask(0);
/*Map.addLayer({
  eeObject: water_mask,
  visParams: VIS_WATER_MASK,
  name: '5% occurrence water mask',
  shown: false
});
*/
var water2 = water_mask.eq(0);
//Map.addLayer(water2,{max: 1, min:0,palette: [ '478d19','AQUA']},'water2');
var Min = image3.clip(roi2);
var urb_mask = Min.gte(1).unmask(0);
var urb = urb_mask.eq(0);
/////////////Altura de Copa//////////////gedi
var gedi = ee.Image('users/potapovpeter/GEDI_V27/GEDI_SAM_v27');
print(gedi);
var gedia = gedi.clip(roi);
/*
Map.addLayer(gedia,
  {palette:["#ffbeee","#daffe0","#c0debf","08ff04","#037e07"],
  min: 3,
  max: 20},
  'GEDI',false); 
*/
//'2020-11-25', '2020-12-12'
///////////////////////////////////REFLECTANCIAS NIVEL SUPERFICIE/////////////////////////////////////////
//Imagen 2020-11-25', '2020-12-12
var sendica = ee.ImageCollection ('COPERNICUS/S2_SR').filterBounds(roi)
           .filterDate('2020-11-25', '2020-12-12').select('B2','B3','B4','B5','B6','B7','B8A','B8','B11','B12').filterMetadata('CLOUD_COVERAGE_ASSESSMENT','less_than', 20.0);
var mosdica = sendica.median();
//Recorte
var Recdica = mosdica.clip(roi);
//Map.addLayer(Recdica, {max: 4200, min:482, bands:['B8', 'B11', 'B4']}, 'Recdica');
//Imagen 2020-12-13', '2021-01-01
var sendicb = ee.ImageCollection ('COPERNICUS/S2_SR').filterBounds(roi)
           .filterDate('2020-12-13', '2021-01-01').select('B2','B3','B4','B5','B6','B7','B8A','B8','B11','B12').filterMetadata('CLOUD_COVERAGE_ASSESSMENT','less_than', 20.0);
var mosdicb = sendicb.median();
//Recorte
var Recdicb = mosdicb.clip(roi);
//Map.addLayer(Recdicb, {max: 4200, min:482, bands:['B8', 'B11', 'B4']}, 'Recdicb');
//Imagen 2021-01-02', '2021-01-16
var senenea = ee.ImageCollection ('COPERNICUS/S2_SR').filterBounds(roi)
           .filterDate('2020-12-21', '2021-01-29').select('B2','B3','B4','B5','B6','B7','B8A','B8','B11','B12').filterMetadata('CLOUD_COVERAGE_ASSESSMENT','less_than', 20.0);
var mosenea = senenea.median();
//Recorte
var Recenea = mosenea.clip(roi);
//Map.addLayer(Recenea, {max: 4200, min:482, bands:['B8', 'B11', 'B4']},'Recenea');
//Imagen 2021-01-17', '2021-02-04
var seneneb = ee.ImageCollection ('COPERNICUS/S2_SR').filterBounds(roi)
           .filterDate('2021-01-17', '2021-02-04').select('B2','B3','B4','B5','B6','B7','B8A','B8','B11','B12').filterMetadata('CLOUD_COVERAGE_ASSESSMENT','less_than', 20.0);
var moseneb = seneneb.median();
//Recorte
var Receneb = moseneb.clip(roi);
//Map.addLayer(Receneb, {max: 4200, min:482, bands:['B8', 'B11', 'B4']},'Receneb');
//Imagen 2021-02-04', '2021-02-21
var senfeba = ee.ImageCollection ('COPERNICUS/S2_SR').filterBounds(roi)
           .filterDate('2021-02-01', '2021-02-28').select('B2','B3','B4','B5','B6','B7','B8A','B8','B11','B12').filterMetadata('CLOUD_COVERAGE_ASSESSMENT','less_than', 20.0);
var mosfeba = senfeba.median();
//Recorte
var Recfeba = mosfeba.clip(roi);
//Map.addLayer(Recfeba, {max: 4200, min:482, bands:['B8', 'B11', 'B4']},'Recfebrero21');
/*
//Imagen Febrero2 2020
var senfebb = ee.ImageCollection ('COPERNICUS/S2_SR').filterBounds(roi)
           .filterDate('2020-02-16', '2020-03-01').select('B2','B3','B4','B5','B6','B7','B8A','B8','B11','B12').filterMetadata('CLOUD_COVERAGE_ASSESSMENT','less_than', 30.0);
var mosfebb = senfebb.median();
//Recorte
var Recfebb = mosfebb.clip(roi);
Map.addLayer(Recfebb, {max: 4200, min:482, bands:['B8', 'B11', 'B4']},'Recfebb');
*/
//Imagen 2021-02-21', '2021-03-18
var senmara = ee.ImageCollection ('COPERNICUS/S2_SR').filterBounds(roi)
           .filterDate('2021-02-19', '2021-03-27').select('B2','B3','B4','B5','B6','B7','B8A','B8','B11','B12').filterMetadata('CLOUD_COVERAGE_ASSESSMENT','less_than', 10.0);
var mosmara = senmara.median();
//Recorte
var Recmara = mosmara.clip(roi);
Map.addLayer(Recmara, {max: 4200, min:482, bands:['B8', 'B11', 'B4']},'Recmara');
//Imagen 2021-03-18', '2021-04-13
var senmarb = ee.ImageCollection ('COPERNICUS/S2_SR').filterBounds(roi)
           .filterDate('2021-03-18', '2021-04-13').select('B2','B3','B4','B5','B6','B7','B8A','B8','B11','B12').filterMetadata('CLOUD_COVERAGE_ASSESSMENT','less_than', 40.0);
var mosmarb = senmarb.median();
//Recorte
var Recmarb = mosmarb.clip(roi);
//Map.addLayer(Recmarb, {max: 4200, min:482, bands:['B8', 'B11', 'B4']},'Recmarb');
//Todas las Reflectancias del año
var imgTOTAL= Recdica.addBands ([Recdicb, Recenea, Receneb, Recfeba, Recmara, Recmarb]);
//print (imgTOTAL, "imgReflect");
//Map.addLayer(imgTOTAL, {max: 3200, min:1200, bands:['B8_3', 'B8_1_1', 'B8_2']},'Recreflect');
///INDICES VARIOS
//generacion de dicccionario
var bandas_indices = {
  'BLUE_1':  Recdica.select('B2').multiply (0.0001),
  'GREEN_1': Recdica.select('B3').multiply (0.0001),
  'RED_1':  Recdica.select('B4').multiply (0.0001),
  'RDED1_1': Recdica.select('B5').multiply (0.0001),
  'RDED2_1': Recdica.select('B6').multiply (0.0001),
  'RDED3_1': Recdica.select('B7').multiply (0.0001),
  'NIR_1':  Recdica.select('B8').multiply (0.0001),
  'SWIR1_1': Recdica.select('B11').multiply (0.0001),
  'SWIR2_1': Recdica.select('B12').multiply (0.0001),
  'BLUE_2':  Recdicb.select('B2').multiply (0.0001),
  'GREEN_2': Recdicb.select('B3').multiply (0.0001),
  'RED_2':  Recdicb.select('B4').multiply (0.0001),
  'RDED1_2': Recdicb.select('B5').multiply (0.0001),
  'RDED2_2': Recdicb.select('B6').multiply (0.0001),
  'RDED3_2': Recdicb.select('B7').multiply (0.0001),
  'NIR_2':  Recdicb.select('B8').multiply (0.0001),
  'SWIR_2': Recdicb.select('B11').multiply (0.0001),
  'SWIR2_2': Recdicb.select('B12').multiply (0.0001),
  'BLUE_3':  Recenea.select('B2').multiply (0.0001),
  'GREEN_3': Recenea.select('B3').multiply (0.0001),
  'RED_3':  Recenea.select('B4').multiply (0.0001),
  'RDED1_3': Recenea.select('B5').multiply (0.0001),
  'RDED2_3': Recenea.select('B6').multiply (0.0001),
  'RDED3_3': Recenea.select('B7').multiply (0.0001),
  'NIR_3':  Recenea.select('B8').multiply (0.0001),
  'SWIR_3': Recenea.select('B11').multiply (0.0001),
  'SWIR2_3': Recenea.select('B12').multiply (0.0001),
  'BLUE_4':  Receneb.select('B2').multiply (0.0001),
  'GREEN_4': Receneb.select('B3').multiply (0.0001),
  'RED_4':  Receneb.select('B4').multiply (0.0001),
  'RDED1_4':Receneb.select('B5').multiply (0.0001),
  'RDED2_4':Receneb.select('B6').multiply (0.0001),
  'RDED3_4':Receneb.select('B7').multiply (0.0001),
  'NIR_4':  Receneb.select('B8').multiply (0.0001),
  'SWIR_4': Receneb.select('B11').multiply (0.0001),
  'SWIR2_4': Receneb.select('B12').multiply (0.0001),
  'BLUE_5':  Recfeba.select('B2').multiply (0.0001),
  'GREEN_5': Recfeba.select('B3').multiply (0.0001),
  'RED_5':  Recfeba.select('B4').multiply (0.0001),
  'RDED1_5':Recfeba.select('B5').multiply (0.0001),
  'RDED2_5':Recfeba.select('B6').multiply (0.0001),
  'RDED3_5':Recfeba.select('B7').multiply (0.0001),
  'NIR_5':  Recfeba.select('B8').multiply (0.0001),
  'SWIR_5': Recfeba.select('B11').multiply (0.0001),
  'SWIR2_5': Recfeba.select('B12').multiply (0.0001),
  'BLUE_6':  Recmara.select('B2').multiply (0.0001),
  'GREEN_6': Recmara.select('B3').multiply (0.0001),
  'RED_6':  Recmara.select('B4').multiply (0.0001),
  'RDED1_6':Recmara.select('B5').multiply (0.0001),
  'RDED2_6':Recmara.select('B6').multiply (0.0001),
  'RDED3_6':Recmara.select('B7').multiply (0.0001),
  'NIR_6':  Recmara.select('B8').multiply (0.0001),
  'SWIR_6': Recmara.select('B11').multiply (0.0001),
  'SWIR2_6': Recmara.select('B12').multiply (0.0001),
  'BLUE_7':  Recmarb.select('B2').multiply (0.0001),
  'GREEN_7': Recmarb.select('B3').multiply (0.0001),
  'RED_7':  Recmarb.select('B4').multiply (0.0001),
  'RDED1_7':Recmarb.select('B5').multiply (0.0001),
  'RDED2_7':Recmarb.select('B6').multiply (0.0001),
  'RDED3_7':Recmarb.select('B7').multiply (0.0001),
  'NIR_7':  Recmarb.select('B8').multiply (0.0001),
  'SWIR_7': Recmarb.select('B11').multiply (0.0001),
  'SWIR2_7': Recmarb.select('B12').multiply (0.0001),
};
//-----------------------
//        NDVI
//-----------------------Recdica, Recdicb, Recenea, Receneb, Recfeba, Recmara, Recmarb
//Calcular NDVI de cada commposicion
var image_ndvi1 = Recdica.normalizedDifference(['B8','B4']).rename('NDVI1');
var image_ndvi2 = Recdicb.normalizedDifference(['B8','B4']).rename('NDVI2');
var image_ndvi3 = Recenea.normalizedDifference(['B8','B4']).rename('NDVI3');
var image_ndvi4 = Receneb.normalizedDifference(['B8','B4']).rename('NDVI4');
var image_ndvi5 = Recfeba.normalizedDifference(['B8','B4']).rename('NDVI5');
var image_ndvi6 = Recmara.normalizedDifference(['B8','B4']).rename('NDVI6');
var image_ndvi7 = Recmarb.normalizedDifference(['B8','B4']).rename('NDVI7');
//Compilar bandas NDVI
var ndviComposite = image_ndvi1.addBands([image_ndvi2,image_ndvi3,image_ndvi4,image_ndvi5,image_ndvi6,image_ndvi7]);
print(ndviComposite,"NDVI");
//Map.addLayer(ndviComposite, {bands: ['NDVI2', 'NDVI3', 'NDVI1'], min: 0.1, max: 1.0}, 'NDVIComposite');
//print('NDVI_Composite', ndviComposite);
//--------------------
//        NDVIbrojo
//--------------------Recoct, Recnov, Recdic, Recdica, Recdicas, Recdicast
var image_ndvire1 = Recdica.normalizedDifference(['B8A','B5']).rename('NDVIre1');
var image_ndvire2 = Recdicb.normalizedDifference(['B8A','B5']).rename('NDVIre2');
var image_ndvire3 = Recenea.normalizedDifference(['B8A','B5']).rename('NDVIre3');
var image_ndvire4 = Receneb.normalizedDifference(['B8A','B5']).rename('NDVIre4');
var image_ndvire5 = Recfeba.normalizedDifference(['B8A','B5']).rename('NDVIre5');
var image_ndvire6 = Recmara.normalizedDifference(['B8A','B5']).rename('NDVIre6');
var image_ndvire7 = Recmarb.normalizedDifference(['B8A','B5']).rename('NDVIre6');
//Compilar bandas NDVIredge
var ndvireComposite = image_ndvire1.addBands([image_ndvire2,image_ndvire3,image_ndvire4,image_ndvire5,image_ndvire6,image_ndvire7]);
print(ndvireComposite,"redNDVI");
//Map.addLayer(ndvireComposite, {bands: ['NDVIre2', 'NDVIre3', 'NDVIre1'], min: 0.1, max: 1.0}, 'NDVIreComposite');
//-----------------------
//        GNDVI
//-----------------------Recdica, Recdicb, Recenea, Receneb, Recfeba, Recmara
var image_gndvi1 =  Recdica.expression('(NIR_1 - GREEN_1) / (NIR_1 + GREEN_1)', bandas_indices).rename('GNDVI1');
//print("GNDVI1", image_gndvi1);
//Map.addLayer(image_gndvi1, { min: [-1], max: [1] }, "GNDVI1",false ); 
var image_gndvi2 = Recdicb.expression('(NIR_2 - GREEN_2) / (NIR_2 + GREEN_2)', bandas_indices).rename('GNDVI2');
//print("GNDVI2", image_gndvi2);
//Map.addLayer(image_gndvi2, { min: [-1], max: [1] }, "GNDVI2",false ); 
var image_gndvi3 = Recenea.expression('(NIR_3 - GREEN_3) / (NIR_3 + GREEN_3)', bandas_indices).rename('GNDVI3');
//print("GNDVI3", image_gndvi3);
//Map.addLayer(image_gndvi3, { min: [-1], max: [1] }, "GNDVI3",false ); 
var image_gndvi4 = Receneb.expression('(NIR_4 - GREEN_4) / (NIR_4 + GREEN_4)', bandas_indices).rename('GNDVI4');
//print("GNDVI4", image_gndvi4);
//Map.addLayer(image_gndvi4, { min: [-1], max: [1] }, "GNDVI4",false ); 
var image_gndvi5 = Recfeba.expression('(NIR_5 - GREEN_5) / (NIR_5 + GREEN_5)', bandas_indices).rename('GNDVI5');
//print("GNDVI5", image_gndvi5 );
//Map.addLayer(image_gndvi5 , { min: [-1], max: [1] }, "GNDVI5",false ); 
var image_gndvi6 = Recmara.expression('(NIR_6 - GREEN_6) / (NIR_6 + GREEN_6)', bandas_indices).rename('GNDVI6');
//print("GNDVI6", image_gndvi6);
//Map.addLayer(image_gndvi6, { min: [-1], max: [1] }, "GNDVI6",false ); 
var image_gndvi7 = Recmarb.expression('(NIR_7 - GREEN_7) / (NIR_7 + GREEN_7)', bandas_indices).rename('GNDVI7');
//print("GNDVI7", image_gndvi7);
//Map.addLayer(image_gndvi6, { min: [-1], max: [1] }, "GNDVI6",false );
//Compilar bandas SAVI
var gndviComposite = image_gndvi1.addBands([image_gndvi2,image_gndvi3,image_gndvi4,image_gndvi5,image_gndvi6,image_gndvi7]);
print(gndviComposite,"GNDVI");
//Map.addLayer(gndviComposite, {bands: ['GNDVI1', 'GNDVI2', 'GNDVI3'], min: 0.1, max: 1.0}, 'GNDVIComposite', false);
//-----------------------
//        MSAVI
//-----------------------Recdica, Recdicb, Recenea, Receneb, Recfeba, Recmara
var image_msavi1 =  Recdica.expression(
  '(2 * NIR_1 + 1 - sqrt(pow((2 * NIR_1 + 1), 2) - 8 * (NIR_1 - RED_1)) ) / 2', bandas_indices).rename('MSAVI1');
//print("MSAVI_1", image_msavi1);
//Map.addLayer(image_msavi1, { min: [-1], max: [1] }, "MSAVI1",false ); 
var image_msavi2 =  Recdicb.expression(
  '(2 * NIR_2 + 1 - sqrt(pow((2 * NIR_2 + 1), 2) - 8 * (NIR_2 - RED_2)) ) / 2', bandas_indices).rename('MSAVI2');
//print("MSAVI_2", image_msavi2);
//Map.addLayer(image_msavi2, { min: [-1], max: [1] }, "MSAVI2",false ); 
var image_msavi3 =  Recenea.expression(
  '(2 * NIR_3 + 1 - sqrt(pow((2 * NIR_3 + 1), 2) - 8 * (NIR_3 - RED_3)) ) / 2', bandas_indices).rename('MSAVI3');
//print("MSAVI_3", image_msavi3);
//Map.addLayer(image_msavi3, { min: [-1], max: [1] }, "MSAVI3",false ); 
var image_msavi4 =  Receneb.expression(
  '(2 * NIR_4 + 1 - sqrt(pow((2 * NIR_4 + 1), 2) - 8 * (NIR_4 - RED_4)) ) / 2', bandas_indices).rename('MSAVI4');
//print("MSAVI_4", image_msavi4);
//Map.addLayer(image_msavi4, { min: [-1], max: [1] }, "MSAVI4",false ); 
var image_msavi5 =  Recfeba.expression(
  '(2 * NIR_5 + 1 - sqrt(pow((2 * NIR_5 + 1), 2) - 8 * (NIR_5 - RED_5)) ) / 2', bandas_indices).rename('MSAVI5');
//print("MSAVI_5", image_msavi5);
//Map.addLayer(image_msavi5, { min: [-1], max: [1] }, "MSAVI5",false ); 
var image_msavi6 =  Recmara.expression(
  '(2 * NIR_6 + 1 - sqrt(pow((2 * NIR_6 + 1), 2) - 8 * (NIR_6 - RED_6)) ) / 2', bandas_indices).rename('MSAVI6');
//print("MSAVI_6", image_msavi6);
//Map.addLayer(image_msavi6, { min: [-1], max: [1] }, "MSAVI6",false ); 
var image_msavi7 =  Recmarb.expression(
  '(2 * NIR_7 + 1 - sqrt(pow((2 * NIR_7 + 1), 2) - 8 * (NIR_7 - RED_7)) ) / 2', bandas_indices).rename('MSAVI7');
//print("MSAVI_7", image_msavi7);
//Map.addLayer(image_msavi6, { min: [-1], max: [1] }, "MSAVI6",false ); 
//Compilar bandas MSAVI
var msaviComposite = image_msavi1.addBands([image_msavi2,image_msavi3,image_msavi4,image_msavi5,image_msavi6,image_msavi7]);
print(msaviComposite,"MSAVI");
//Map.addLayer(msaviComposite, {bands: ['MSAVI1', 'MSAVI2', 'MSAVI3'], min: 0.1, max: 1.0}, 'MSAVIComposite', false);
//-----------------------
//        EVI
//-----------------------Recdica, Recdicb, Recenea, Receneb, Recfeba, Recmara
// General formula: 2.5 * (NIR - RED) / ((NIR + 6*RED - 7.5*BLUE) + 1)
//Calcular el SAVI de cada composicion
var image_evi1 = Recdica.expression('2.5 * (NIR_1 - RED_1) / ((NIR_1 + 6*RED_1 - 7.5*BLUE_1) + 1)', bandas_indices).rename('EVI1');
//print("EVI_1", image_evi1);
//Map.addLayer(image_savi1, { min: [-1], max: [1] }, "EV1",false ); 
var image_evi2 = Recdicb.expression('2.5 * (NIR_2 - RED_2) / ((NIR_2 + 6*RED_2 - 7.5*BLUE_2) + 1)', bandas_indices).rename('EVI21');
//print("EVI_2", image_evi2);
//Map.addLayer(image_savi2, { min: [-1], max: [1] }, "SAVI2",false ); 
var image_evi3 = Recenea.expression('2.5 * (NIR_3 - RED_3) / ((NIR_3 + 6*RED_3 - 7.5*BLUE_3) + 1)', bandas_indices).rename('EVI3');
//print("EVI_3", image_evi3);
//Map.addLayer(image_savi3, { min: [-1], max: [1] }, "SAVI3",false ); 
var image_evi4 = Receneb.expression('2.5 * (NIR_4 - RED_4) / ((NIR_4 + 6*RED_4 - 7.5*BLUE_4) + 1)', bandas_indices).rename('EVI4');
//print("EVI_4", image_evi4);
//Map.addLayer(image_savi4, { min: [-1], max: [1] }, "SAVI4",false ); 
var image_evi5 = Recfeba.expression('2.5 * (NIR_5 - RED_5) / ((NIR_5 + 6*RED_5 - 7.5*BLUE_5) + 1)', bandas_indices).rename('EVI5');
//print("EVI_5", image_evi5);
//Map.addLayer(image_savi5, { min: [-1], max: [1] }, "SAVI5",false ); 
var image_evi6 = Recmara.expression('2.5 * (NIR_6 - RED_6) / ((NIR_6 + 6*RED_6 - 7.5*BLUE_6) + 1)', bandas_indices).rename('EVI6');
//print("EVI_6", image_evi6);
//Map.addLayer(image_savi6, { min: [-1], max: [1] }, "SAVI6",false ); 
var image_evi7 = Recmarb.expression('2.5 * (NIR_7 - RED_7) / ((NIR_7 + 6*RED_7 - 7.5*BLUE_7) + 1)', bandas_indices).rename('EVI7');
//print("EVI_7", image_evi7);
//Map.addLayer(image_savi6, { min: [-1], max: [1] }, "SAVI6",false );
//Compilar bandas SAVI
var eviComposite = image_evi1.addBands([image_evi2,image_evi3,image_evi4,image_evi5,image_evi6,image_evi7]);
print(eviComposite,"EVI");
//Map.addLayer(saviComposite, {bands: ['SAVI1', 'SAVI2', 'SAVI3'], min: 0.1, max: 1.0}, 'SAVIComposite', false);
//--------------------
//        NDWI
//--------------------Recoct, Recnov, Recdic, Recdica, Recdicas, Recdicast
var ndwi1 =   Recdica.expression('(GREEN_1 - NIR_1) / (GREEN_1 + NIR_1 )', bandas_indices).rename('NDWI1');
//print("NDWI1", ndwi1);
//Map.addLayer(ndwi1, { min: [-1], max: [1] }, "NDWI1",false );
var ndwi2 =   Recdicb.expression('(GREEN_2 - NIR_2) / (GREEN_2 + NIR_2 )', bandas_indices).rename('NDWI2');
//print("NDWI2", ndwi2);
//Map.addLayer(ndwi2, { min: [-1], max: [1] }, "NDWI2",false );
var ndwi3 =   Recenea.expression('(GREEN_3 - NIR_3) / (GREEN_3 + NIR_3 )', bandas_indices).rename('NDWI3');
//print("NDWI3", ndwi3);
//Map.addLayer(ndwi3, { min: [-1], max: [1] }, "NDWI3",false );
var ndwi4 =   Receneb.expression('(GREEN_4 - NIR_4) / (GREEN_4 + NIR_4 )', bandas_indices).rename('NDWI4');
//print("NDWI4", ndwi4);
//Map.addLayer(ndwi4, { min: [-1], max: [1] }, "NDWI4",false );
var ndwi5 =   Recfeba.expression('(GREEN_5 - NIR_5) / (GREEN_5 + NIR_5 )', bandas_indices).rename('NDWI5');
//print("NDWI5", ndwi5);
//Map.addLayer(ndwi5, { min: [-1], max: [1] }, "NDWI5",false );
var ndwi6 =   Recmara.expression('(GREEN_6 - NIR_6) / (GREEN_6 + NIR_6 )', bandas_indices).rename('NDWI6');
//print("NDWI6", ndwi6);
//Map.addLayer(ndwi5, { min: [-1], max: [1] }, "NDWI6",false );
var ndwi7 =   Recmarb.expression('(GREEN_7 - NIR_7) / (GREEN_7 + NIR_7 )', bandas_indices).rename('NDWI7');
//print("NDWI6", ndwi6);
//Map.addLayer(ndwi5, { min: [-1], max: [1] }, "NDWI6",false );
//Compilar bandas NDWI
var ndwiComposite = ndwi1.addBands([ndwi2,ndwi3,ndwi4,ndwi5,ndwi6,ndwi7]);
print(ndwiComposite,"NDWI");
//Map.addLayer(ndwiComposite, {bands: ['NDWI1', 'NDWI2', 'NDWI3'], min: -1, max: 1.0}, 'NDWIComposite', false);
//------------------
//      CGVI
//------------------Recoct, Recnov, Recdic, Recdica, Recdicas, Recdicast
//Calcular GCVI para cada composición
var gcvi1 = Recdica.expression('(NIR_1 / GREEN_1)- 1', bandas_indices).rename('GCVI_1');
//print("GCVI1", gcvi1);
//Map.addLayer(gcvi1, { min: [-1], max: [1] }, "GCVI1" , false);
var gcvi2 = Recdicb.expression('(NIR_2 / GREEN_2)- 1', bandas_indices).rename('GCVI_2');
//print("GCVI2", gcvi2);
//Map.addLayer(gcvi2, { min: [-1], max: [1] }, "GCVI2" , false);
var gcvi3 = Recenea.expression('(NIR_3 / GREEN_3)- 1', bandas_indices).rename('GCVI_3');
//print("GCVI3", gcvi3);
//Map.addLayer(gcvi3, { min: [-1], max: [1] }, "GCVI3" , false);
var gcvi4 = Receneb.expression('(NIR_4 / GREEN_4)- 1', bandas_indices).rename('GCVI_4');
//print("GCVI4", gcvi4);
//Map.addLayer(gcvi4, { min: [-1], max: [1] }, "GCVI4" , false);
var gcvi5 = Recfeba.expression('(NIR_5 / GREEN_5)- 1', bandas_indices).rename('GCVI_5');
//print("GCVI5", gcvi5);
//Map.addLayer(gcvi5, { min: [-1], max: [1] }, "GCVI5" , false);
var gcvi6 = Recmara.expression('(NIR_6 / GREEN_6)- 1', bandas_indices).rename('GCVI_6');
//print("GCVI6", gcvi6);
//Map.addLayer(gcvi6, { min: [-1], max: [1] }, "GCVI6" , false);
var gcvi7 = Recmarb.expression('(NIR_7 / GREEN_7)- 1', bandas_indices).rename('GCVI_7');
//print("GCVI7", gcvi7);
//Map.addLayer(gcvi6, { min: [-1], max: [1] }, "GCVI6" , false);
//Compilar bandas CGVI
var gcviComposite = gcvi1.addBands([gcvi2,gcvi3,gcvi4,gcvi5,gcvi6,gcvi7]);
print(gcviComposite,"CGVI");
//Map.addLayer(gcviComposite, {bands: ['GCVI_1', 'GCVI_2', 'GCVI_3'], min: 0, max: 3.5}, 'GCVIComposite', false);
//let index = (3.0 * (RDED1_1 - RED_1) - 0.2 * (RDED1_1 - GREEN_1) * RDED1_1 / RED_1) / ((1.0 + 0.16) * (NIR_1 - RED_1) / (NIR_1 + RED_1 + 0.16));
//-----------------------
//        TCARI/OSAVI
//-----------------------Recdica, Recdicb, Recenea, Receneb, Recfeba, Recmara
var image_tcari1 =  Recdica.expression(
  '(3 * (RDED1_1 - RED_1) - 0.2 * (RDED1_1 - GREEN_1) * (RDED1_1 / RED_1)) / ((1 + 0.16)*(( NIR_1 - RED_1)/(NIR_1 + RED_1 + 0.16)))', bandas_indices).rename('TCARI1');
//print("TCARI_1", image_tcari1);
//Map.addLayer(image_tcari1, { min: [1122], max: [4706] }, "TCARI1",false ); 
var image_tcari2 =  Recdicb.expression(
  '(3 * (RDED1_2 - RED_2) - 0.2 * (RDED1_2 - GREEN_2) * (RDED1_2 / RED_2)) / ((1 + 0.16)*(( NIR_2 - RED_2)/(NIR_2 + RED_2 + 0.16)))', bandas_indices).rename('TCARI2');
//print("TCARI_2", image_tcari2);
//Map.addLayer(image_msavi2, { min: [-1], max: [1] }, "MSAVI2",false ); 
var image_tcari3 =  Recenea.expression(
  '(3 * (RDED1_3 - RED_3) - 0.2 * (RDED1_3 - GREEN_3) * (RDED1_3/ RED_3)) / ((1 + 0.16)*(( NIR_3 - RED_3)/(NIR_3 + RED_3 + 0.16)))', bandas_indices).rename('TCARI3');
//print("TCARI_3", image_tcari3);
//Map.addLayer(image_msavi3, { min: [-1], max: [1] }, "MSAVI3",false ); 
var image_tcari4 =  Receneb.expression(
  '(3 * (RDED1_4 - RED_4) - 0.2 * (RDED1_4 - GREEN_4) * (RDED1_4 / RED_4)) / ((1 + 0.16)*(( NIR_4 - RED_4)/(NIR_4 + RED_4 + 0.16)))', bandas_indices).rename('TCARI4');
//print("TCARI_4", image_tcari4);
//Map.addLayer(image_tcari4, { min: [-1], max: [1] }, "TCARI4",false ); 
var image_tcari5 =  Recfeba.expression(
  '(3 * (RDED1_5 - RED_5) - 0.2 * (RDED1_5 - GREEN_5) * (RDED1_5 / RED_5)) / ((1 + 0.16)*(( NIR_5 - RED_1)/(NIR_5 + RED_5 + 0.16)))', bandas_indices).rename('TCARI5');
//print("TCARI_5", image_tcari5);
//Map.addLayer(image_msavi5, { min: [-1], max: [1] }, "MSAVI5",false ); 
var image_tcari6 =  Recmara.expression(
  '(3 * (RDED1_6 - RED_6) - 0.2 * (RDED1_6 - GREEN_6) * (RDED1_6 / RED_6)) / ((1 + 0.16)*(( NIR_6 - RED_6)/(NIR_6 + RED_6 + 0.16)))', bandas_indices).rename('TCARI6');
//print("TCARI_6", image_tcari6);
//Map.addLayer(image_msavi6, { min: [-1], max: [1] }, "MSAVI6",false ); 
var image_tcari7 =  Recmarb.expression(
  '(3 * (RDED1_7 - RED_7) - 0.2 * (RDED1_7 - GREEN_7) * (RDED1_7 / RED_7)) / ((1 + 0.16)*(( NIR_7 - RED_7)/(NIR_7 + RED_7 + 0.16)))', bandas_indices).rename('TCARI7');
//print("TCARI_7", image_tcari7);
//Map.addLayer(image_msavi6, { min: [-1], max: [1] }, "MSAVI6",false );
//Compilar bandas MSAVI
var tcariComposite = image_tcari1.addBands([image_tcari2,image_tcari3,image_tcari4,image_tcari5,image_tcari6,image_tcari7]);
print(tcariComposite,"TCARI/OSAVI");
//Map.addLayer(tcariComposite, {bands: ['TCARI1', 'TCARI2', 'TCARI3'], min: 854.47, max: 4352.47}, 'tcariComposite', false);
var osavi1= Recdica.expression(
  '((1 + 0.16)*(( NIR_1 - RED_1)/(NIR_1 + RED_1 + 0.16)))',bandas_indices).rename('OSAV1');
var osavi2= Recdicb.expression(
  '((1 + 0.16)*(( NIR_2 - RED_2)/(NIR_1 + RED_2 + 0.16)))',bandas_indices).rename('OSAV2');
var osavi3= Recenea.expression(
  '((1 + 0.16)*(( NIR_3 - RED_3)/(NIR_3 + RED_3 + 0.16)))',bandas_indices).rename('OSAV3');
var osavi4= Receneb.expression(
  '((1 + 0.16)*(( NIR_4 - RED_4)/(NIR_4 + RED_4 + 0.16)))',bandas_indices).rename('OSAV4');
var osavi5= Recfeba.expression(
  '((1 + 0.16)*(( NIR_5 - RED_5)/(NIR_5 + RED_5 + 0.16)))',bandas_indices).rename('OSAV5');
var osavi6= Recmara.expression(
  '((1 + 0.16)*(( NIR_6 - RED_6)/(NIR_6 + RED_6 + 0.16)))',bandas_indices).rename('OSAV6');
var osavi7= Recmarb.expression(
  '((1 + 0.16)*(( NIR_7 - RED_7)/(NIR_7 + RED_7 + 0.16)))',bandas_indices).rename('OSAV7');
//Compilar bandas 0SAVI
var osaviComposite = osavi1.addBands([osavi2,osavi3,osavi4,osavi5,osavi6,osavi7]);
print(osaviComposite,"OSAVI");
//Map.addLayer(tcariComposite, {bands: ['TCARI1', 'TCARI2', 'TCARI3'], min: 854.47, max: 4352.47}, 'tcariComposite', false);
var ARVI1 = Recdica.expression (
  '((NIR_1 - (2 * RED_1) + BLUE_1) / (NIR_1 + (2 * RED_1) + BLUE_1))',bandas_indices).rename('ARVI1');
var ARVI2 = Recdicb.expression (
  '((NIR_2 - (2 * RED_2) + BLUE_2) / (NIR_2 + (2 * RED_2) + BLUE_2))',bandas_indices).rename('ARVI2');
var ARVI3 = Recenea.expression (
  '((NIR_3 - (2 * RED_3) + BLUE_3) / (NIR_3 + (2 * RED_3) + BLUE_3))',bandas_indices).rename('ARVI3');
var ARVI4 = Receneb.expression (
  '((NIR_4 - (2 * RED_4) + BLUE_4) / (NIR_4 + (2 * RED_4) + BLUE_4))',bandas_indices).rename('ARVI4');
var ARVI5 = Recfeba.expression (
  '((NIR_5 - (2 * RED_5) + BLUE_5) / (NIR_5 + (2 * RED_5) + BLUE_5))',bandas_indices).rename('ARVI5');
var ARVI6 = Recmara.expression (
  '((NIR_6 - (2 * RED_6) + BLUE_6) / (NIR_6 + (2 * RED_6) + BLUE_6))',bandas_indices).rename('ARVI6');
var ARVI7 = Recmarb.expression (
  '((NIR_7 - (2 * RED_7) + BLUE_7) / (NIR_7 + (2 * RED_7) + BLUE_7))',bandas_indices).rename('ARVI7');
 //Compilar bandas 0SAVI
var ARVIComposite = ARVI1.addBands([ARVI2,ARVI3,ARVI4,ARVI5,ARVI6,ARVI7]);
print(ARVIComposite,"ARVI"); 
//Calcular RESR  red edge simple ratio para cada composición
var srrd1 = Recdica.expression('(NIR_1 / RDED1_1)', bandas_indices).rename('SRRE_1');
//print("GCVI1", gcvi1);
//Map.addLayer(gcvi1, { min: [-1], max: [1] }, "GCVI1" , false);
var srrd2 = Recdicb.expression('(NIR_2 / RDED1_2)', bandas_indices).rename('SRRE_2');
//print("GCVI2", gcvi2);
//Map.addLayer(gcvi2, { min: [-1], max: [1] }, "GCVI2" , false);
var srrd3 = Recenea.expression('(NIR_3 / RDED1_3)', bandas_indices).rename('SRRE_3');
//print("GCVI3", gcvi3);
//Map.addLayer(gcvi3, { min: [-1], max: [1] }, "GCVI3" , false);
var srrd4 = Receneb.expression('(NIR_4 / RDED1_4)', bandas_indices).rename('SRRE_4');
//print("GCVI4", gcvi4);
//Map.addLayer(gcvi4, { min: [-1], max: [1] }, "GCVI4" , false);
var srrd5 = Recfeba.expression('(NIR_5 / RDED1_5)', bandas_indices).rename('SRRE_5');
//print("GCVI5", gcvi5);
//Map.addLayer(gcvi5, { min: [-1], max: [1] }, "GCVI5" , false);
var srrd6 = Recmara.expression('(NIR_6 / RDED1_6)', bandas_indices).rename('SRRE_6');
//print("GCVI6", gcvi6);
//Map.addLayer(gcvi6, { min: [-1], max: [1] }, "GCVI6" , false);
var srrd7 = Recmarb.expression('(NIR_7 / RDED1_7)', bandas_indices).rename('SRRE_7');
//print("GCVI7", gcvi7);
//Map.addLayer(gcvi6, { min: [-1], max: [1] }, "GCVI6" , false);
//Compilar bandas SRRE
var srrdComposite = srrd1.addBands([srrd2,srrd3,srrd4,srrd5,srrd6,srrd7]);
print(srrdComposite,"SRRE");
//Map.addLayer(gcviComposite, {bands: ['GCVI_1', 'GCVI_2', 'GCVI_3'], min: 0, max: 3.5}, 'GCVIComposite', false);
print ("Img_Reflect",imgTOTAL);
var imgTrabajo= ndviComposite.addBands([ndvireComposite, gndviComposite, msaviComposite, ndwiComposite, gcviComposite,eviComposite,tcariComposite,osaviComposite,ARVIComposite,srrdComposite]);
print('IMG_INDICES', imgTrabajo);
// Create a constant image.
var image1 = ee.Image(imgTOTAL);
// Concatenate two images into one multi-band image. stacking4
//var image28 = ee.Image(stacking4);
var image2 = ee.Image(imgTrabajo);
//var image11 = ee.Image(stack4);
//var image21 = ee.Image(imgRetro);
var image31 = ee.Image.cat([image1, image2]);
print("StackFINAL",image3);
var image3 = image31.updateMask(water2);
///////MUESTRAS, unir verdad de campo. // Muestreo
//var muestras = bajos.merge(mz_temp).merge(maiz_prim).merge(maiz_seg).merge(soja_prim).merge(soja_seg).merge(potrero);
var seed =  560;
var muestras = muestras.randomColumn('random', seed);
// separo las muestras de Entrenamiento y validación, son independientes. Identificar umbral de separación
var features_train = muestras.filter(ee.Filter.lt('random', 0.70));
var features_test = muestras.filter(ee.Filter.gte('random', 0.70));
print ("training", features_train.size());
print ("testing", features_test.size());
// extraccion de información incluyendo atributos clase y "random"
var training = image3.sampleRegions({
  collection: features_train, //Acá van las muestras 
  properties: ['class','random'], 
  scale:49
});
var testing = image3.sampleRegions({
  collection: features_test, //Acá van las muestras 
  properties: ['class','random'], 
  scale:49
});
print ("train", training.size());
print ("test", testing.size());
//Exportar polígonos de training para analizar matriz de error en Qgis
Export.table.toDrive({
  collection: features_train,
  description: 'Training',
  folder: 'my_folder',
  fileFormat: 'shp'
});
//Exportar polígonos de testing para analizar matriz de error en Qgis
Export.table.toDrive({
  collection: features_test,
  description: 'Testing',
  folder: 'my_folder',
  fileFormat: 'shp'
});
// Entrenamiento
var parametros = {
  numberOfTrees: 117, 
  minLeafPopulation: 1, 
  seed: 15
};
var trained = ee.Classifier.smileRandomForest(parametros).train(training, 'class');
// clasificación con el modelo entrenado
var classified = image3.classify(trained);
// Crea la paleta de colores para pintar el mapa
// tantos colores como clases de  0 a n 
var paleta =['#39e600','#999999','#99ff66','#4d0039','#ffff00','#0000ff','#666699','#ff1aff','#ff0000','#4d4dff','#66ffff','#663300','#669999'];
//Map.addLayer(classified, {min: 1, max: 13, palette: paleta}, 'clasificacion');              
print("clasificacion" , classified);
//************************************************************************** 
// Postproceso reemplazando píxeles aislados con valor circundante
//************************************************************************** 
// tamaño de parche
var patchsize = classified.connectedPixelCount(50, false);
// ejecutar un filtro de mayoría
var filtered1 = classified.focal_mode({
    radius: 28,
    kernelType: 'square',
    units: 'meters',
}); 
// updated image with majority filter where patch size is small
var connectedClassified =  classified.where(patchsize.lt(45),filtered1);
Map.addLayer(connectedClassified, {min: 1, max: 13, palette: paleta}, 'Clasificación Filtrada');
// Exportar imagen de clasificación
Export.image.toDrive({
  image:connectedClassified,
  description: 'ClassifiedFILTRADA',
  scale: 30,
  maxPixels: 1.0E13,
  region: roi
});
/**********************************Reclasificación con codigos para armar MAPA NACIONAL de CULTIVOS****************************/
/*
var reclass = connectedClassified.remap([1,2,3,4,5,6,7,8,9,10,11,12,13,14],[1,1,1,1,2,2,3,3,1,2,2,4,5,1])
;
Map.addLayer(reclass, {palette: ['#f7fcf5','#e5f5e0','#c7e9c0','#a1d99b','#003300']}, 'reclass');
// Exportar imagen de clasificación
Export.image.toDrive({
  image:reclass,
  description: 'reclassdelLincoln',
  scale: 30,
  maxPixels: 1.0E13,
  region: roi
});
*/
// Generación de matriz de confusión y resultados
/*var training_pred = training.classify(trained);
var errorMatrix_training = training_pred.errorMatrix('clase', 'classification');  
print('Matriz de Confusión Training:', errorMatrix_training);
print('Exactitud General Training:', errorMatrix_training.accuracy());
print('Indice Kappa Training:', errorMatrix_training.kappa());
print('Exactitudes de Usuario Training:', errorMatrix_training.consumersAccuracy());
print('Exactitudes de Productor Training:', errorMatrix_training.producersAccuracy());
*/
var validation = testing.classify(trained);
var errorMatrix = validation.errorMatrix('class', 'classification');
print('Matriz de Confusión:', errorMatrix);
print('Exactitud General:', errorMatrix.accuracy());
print('Indice Kappa:', errorMatrix.kappa());
print('Exactitudes de Usuario:', errorMatrix.consumersAccuracy());
print('Exactitudes de Productor:', errorMatrix.producersAccuracy());
var exportAccuracy = ee.Feature(null, {matrix: errorMatrix.array()})
// Export the FeatureCollection.
Export.table.toDrive({
  collection: ee.FeatureCollection(exportAccuracy),
  description: 'exportAccuracy',
  fileFormat: 'CSV'
});
/*
//Definir imagen sobre la cual se quieren realizar los calculos de area
var imagen = classified;
//Definir region en caso de que el calculo se quiera hacer sobre una subregion de la imagen
var region = roi5
var areaDict = ee.Image.pixelArea().divide(10000).addBands(imagen)
  .reduceRegion({
    reducer: ee.Reducer.sum().group(1),
    geometry: region.geometry(), //cambiar imagen por region en esta línea en caso de usar una subregion
    scale: 40,
    maxPixels:1e13,
  });
var areas = ee.List(areaDict.get('groups')).map(function(obj) { 
  return ee.Dictionary(obj).get('sum')})
var areas2 = areas.getInfo();
for (var loop = 0; loop < areas2.length; ++loop)
{var loop2 = loop + 1;
 var numero = ee.Number.parse(areas2[loop].toString()).format('%,.2f');
print( 'Clase ' + loop2 + ' = ' + numero.getInfo() + ' ha')}
*/
// Leyenda
var legend = ui.Panel({style: {position: 'bottom-right', padding: '8px 15px'}});
var loading = ui.Label('', {margin: '2px 0 4px 0'});
legend.add(loading);
var makeRow = function(color, name) {
  // Create the label that is actually the colored box.
  var colorBox = ui.Label({
    style: {
      backgroundColor: '#' + color,
      // Use padding to give the box height and width.
      padding: '8px',
      margin: '0 0 4px 0'
    }
  });
  // Create the label filled with the description text.
  var description = ui.Label({
    value: name,
    style: {margin: '0 0 4px 6px'}
  });
  return ui.Panel({
    widgets: [colorBox, description],
    layout: ui.Panel.Layout.Flow('horizontal')
  });
};
legend.add(makeRow('39e600', 'pasturas'));
legend.add(makeRow('999999', 'barbechos'));
legend.add(makeRow('99ff66', 'campo nat'));
legend.add(makeRow('4d0039', 'girasol'));
legend.add(makeRow('ffff00', 'mani'));
legend.add(makeRow('0000ff', 'maiz1'));
legend.add(makeRow('666699', 'sorgo'));
legend.add(makeRow('ff1aff', 'soja1'));
legend.add(makeRow('ff0000', 'soja2'));
legend.add(makeRow('4d4dff', 'maiz2'));
legend.add(makeRow('66ffff', 'bajos'));
legend.add(makeRow('663300', 'montes'));
legend.add(makeRow('669999', 'moha'));
//var paleta =['#009933','#ffffe6','#99ff66','#4d0039','#ffff00','#0000ff','#666699','#ff1aff','#ff0000','#4d4dff','#66ffff','#663300','#669999'];
Map.add(legend);
// Exportar imagen de clasificación
Export.image.toDrive({
  image:classified,
  description: 'imageMaraco',
  scale: 30,
  maxPixels: 1.0E13,
  region: roi
});
// Create an empty image into which to paint the features, cast to byte.
var empty = ee.Image().byte();
// Paint all the polygon edges with the same number and width, display.
var outline = empty.paint({
  featureCollection: muestras,
  color: 1,
  width: 1
});
//Map.addLayer(outline, {palette: 'white'}, 'Muestras');
// Create an empty image into which to paint the features, cast to byte.
var empta = ee.Image().byte();
// Paint all the polygon edges with the same number and width, display.
var outline = empta.paint({
  featureCollection: table4,
  color: 1,
  width: 4
});
//Map.addLayer(outline, {palette: 'white'}, 'zone');
// Add the maps and title to the ui.root.
//ui.root.widgets().reset([title, mapGrid]);
//ui.root.setLayout(ui.Panel.Layout.Flow('vertical'));
Map.add(ui.Label(
    'LULC:  Laboulaye - Cosecha Gruesa 20/21 ' 
    , {fontWeight: 'bold', fontSize: '20px'}));
/******************Grafico de tortas****************************/
/********************************************Gráfico de áreas**************************************************/
var imagen = classified
var nomes = ['pasturas','barbechos','cnatural','girasol','mani','maiz1','sorgo','soja1','soja2','maiz2','bajos','montes','moha']
var renomeado = imagen.eq([1,2,3,4,5,6,7,8,9,10,11,12,13]).rename(nomes)
print('classes', renomeado)
var area = renomeado.multiply(ee.Image.pixelArea()).divide(10000) //para converter para hectares (ha)
var area_por_classe = area.reduceRegion({
  reducer: ee.Reducer.sum(), //quero somar a área total
  geometry: roi2,
  scale:70, 
  crs:'EPSG: 4326', 
 // bestEffort: true, 
  maxPixels:1e13})
var area_total = ee.Number(area_por_classe)
print('area total por clase',area_total)
//Criando listas array
var a = ee.Array(area_por_classe.get('pasturas'))
var b = ee.Array(area_por_classe.get('barbechos'))
var c = ee.Array(area_por_classe.get('cnatural'))
var d = ee.Array(area_por_classe.get('girasol'))
var e = ee.Array(area_por_classe.get('mani'))
var f = ee.Array(area_por_classe.get('maiz1'))
var g = ee.Array(area_por_classe.get('sorgo'))
var h = ee.Array(area_por_classe.get('soja1'))
var i = ee.Array(area_por_classe.get('soja2'))
var j = ee.Array(area_por_classe.get('maiz2'))
var k = ee.Array(area_por_classe.get('maiz2'))
var l = ee.Array(area_por_classe.get('maiz2'))
var m = ee.Array(area_por_classe.get('maiz2'))
var lista = ee.List([a,b,c,d,e,f,g,h,i,j,k,l,m])
var Nomes = ee.List(nomes)
var grafico_area = ui.Chart.array.values(lista,0, Nomes)
.setChartType('PieChart')
.setOptions(
  {width: 450,
  height: 550,
  title: 'Area por clase (Has)',
  is3D: true,
  colors: paleta})
//print(grafico_area)
grafico_area.style().set({
  position: 'bottom-left',
  width: '550px',
  height: '280px'
});
Map.add(grafico_area);
//////////////////////////////////////////////////////////////////////////////////////////////
// Create an empty image into which to paint the features, cast to byte.
var empty = ee.Image().byte();
// Paint all the polygon edges with the same number and width, display.
var outline = empty.paint({
  featureCollection: departamentos,
  color: 1,
  width: 2
});
Map.addLayer (planta_urbana,{color: 'black'}, 'Ejidos');
Map.addLayer(outline, {palette: '001327'}, 'Deptos');
//////////////////////////////////////////////////////////////////////////////////////////////
// Create an empty image into which to paint the features, cast to byte.
var empty = ee.Image().byte();
// Paint all the polygon edges with the same number and width, display.
var outline = empty.paint({
  featureCollection: table6,
  color: 1,
  width: 4
});
//Map.addLayer (outline,{color: 'white'}, 'Zones');